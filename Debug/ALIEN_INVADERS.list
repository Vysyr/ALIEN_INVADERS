
ALIEN_INVADERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006948  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003930  08006ad8  08006ad8  00007ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a408  0800a408  0000c064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a408  0800a408  0000b408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a410  0800a410  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a410  0800a410  0000b410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a414  0800a414  0000b414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800a418  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a334  20000064  0800a47c  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  2000a398  0800a47c  0000c398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d55  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa9  00000000  00000000  0001cde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001fd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb7  00000000  00000000  00020d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028de9  00000000  00000000  000218df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d6a  00000000  00000000  0004a6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa49d  00000000  00000000  0005e432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001588cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004380  00000000  00000000  00158914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0015cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ac0 	.word	0x08006ac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08006ac0 	.word	0x08006ac0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	@ 0x28
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000276:	f107 031c 	add.w	r3, r7, #28
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
 8000290:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000292:	4b37      	ldr	r3, [pc, #220]	@ (8000370 <MX_ADC1_Init+0x100>)
 8000294:	4a37      	ldr	r2, [pc, #220]	@ (8000374 <MX_ADC1_Init+0x104>)
 8000296:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000298:	4b35      	ldr	r3, [pc, #212]	@ (8000370 <MX_ADC1_Init+0x100>)
 800029a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800029e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002a0:	4b33      	ldr	r3, [pc, #204]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a6:	4b32      	ldr	r3, [pc, #200]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002ac:	4b30      	ldr	r3, [pc, #192]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002b4:	2204      	movs	r2, #4
 80002b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002be:	4b2c      	ldr	r3, [pc, #176]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80002c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ca:	4b29      	ldr	r3, [pc, #164]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d2:	4b27      	ldr	r3, [pc, #156]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002d8:	4b25      	ldr	r3, [pc, #148]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002da:	2200      	movs	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80002de:	4b24      	ldr	r3, [pc, #144]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002e6:	4b22      	ldr	r3, [pc, #136]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80002ec:	4b20      	ldr	r3, [pc, #128]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f4:	481e      	ldr	r0, [pc, #120]	@ (8000370 <MX_ADC1_Init+0x100>)
 80002f6:	f001 fc97 	bl	8001c28 <HAL_ADC_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000300:	f001 f86d 	bl	80013de <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000304:	2300      	movs	r3, #0
 8000306:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000308:	f107 031c 	add.w	r3, r7, #28
 800030c:	4619      	mov	r1, r3
 800030e:	4818      	ldr	r0, [pc, #96]	@ (8000370 <MX_ADC1_Init+0x100>)
 8000310:	f002 fbe6 	bl	8002ae0 <HAL_ADCEx_MultiModeConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800031a:	f001 f860 	bl	80013de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800031e:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <MX_ADC1_Init+0x108>)
 8000320:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000322:	2306      	movs	r3, #6
 8000324:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000326:	2307      	movs	r3, #7
 8000328:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800032a:	237f      	movs	r3, #127	@ 0x7f
 800032c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800032e:	2304      	movs	r3, #4
 8000330:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	480d      	ldr	r0, [pc, #52]	@ (8000370 <MX_ADC1_Init+0x100>)
 800033c:	f001 fe9e 	bl	800207c <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000346:	f001 f84a 	bl	80013de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800034a:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <MX_ADC1_Init+0x10c>)
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800034e:	230c      	movs	r3, #12
 8000350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	@ (8000370 <MX_ADC1_Init+0x100>)
 8000358:	f001 fe90 	bl	800207c <HAL_ADC_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000362:	f001 f83c 	bl	80013de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	3728      	adds	r7, #40	@ 0x28
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000080 	.word	0x20000080
 8000374:	50040000 	.word	0x50040000
 8000378:	14f00020 	.word	0x14f00020
 800037c:	19200040 	.word	0x19200040

08000380 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b0ac      	sub	sp, #176	@ 0xb0
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000388:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	2288      	movs	r2, #136	@ 0x88
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f005 ff0f 	bl	80061c4 <memset>
  if(adcHandle->Instance==ADC1)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a3d      	ldr	r2, [pc, #244]	@ (80004a0 <HAL_ADC_MspInit+0x120>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d172      	bne.n	8000496 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80003b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80003b6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80003ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80003c6:	2308      	movs	r3, #8
 80003c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80003ca:	2307      	movs	r3, #7
 80003cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80003ce:	2302      	movs	r3, #2
 80003d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80003da:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	4618      	mov	r0, r3
 80003e2:	f003 ff3d 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80003ec:	f000 fff7 	bl	80013de <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003f0:	4b2c      	ldr	r3, [pc, #176]	@ (80004a4 <HAL_ADC_MspInit+0x124>)
 80003f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f4:	4a2b      	ldr	r2, [pc, #172]	@ (80004a4 <HAL_ADC_MspInit+0x124>)
 80003f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003fc:	4b29      	ldr	r3, [pc, #164]	@ (80004a4 <HAL_ADC_MspInit+0x124>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b26      	ldr	r3, [pc, #152]	@ (80004a4 <HAL_ADC_MspInit+0x124>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040c:	4a25      	ldr	r2, [pc, #148]	@ (80004a4 <HAL_ADC_MspInit+0x124>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000414:	4b23      	ldr	r3, [pc, #140]	@ (80004a4 <HAL_ADC_MspInit+0x124>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000420:	2303      	movs	r3, #3
 8000422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000426:	230b      	movs	r3, #11
 8000428:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000436:	4619      	mov	r1, r3
 8000438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043c:	f002 ff0a 	bl	8003254 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000440:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 8000442:	4a1a      	ldr	r2, [pc, #104]	@ (80004ac <HAL_ADC_MspInit+0x12c>)
 8000444:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000446:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800044c:	4b16      	ldr	r3, [pc, #88]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000452:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 8000454:	2200      	movs	r2, #0
 8000456:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800045e:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 8000460:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000464:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 8000468:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800046c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 8000470:	2220      	movs	r2, #32
 8000472:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 8000476:	2200      	movs	r2, #0
 8000478:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800047a:	480b      	ldr	r0, [pc, #44]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 800047c:	f002 fcf2 	bl	8002e64 <HAL_DMA_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000486:	f000 ffaa 	bl	80013de <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a06      	ldr	r2, [pc, #24]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 800048e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000490:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <HAL_ADC_MspInit+0x128>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000496:	bf00      	nop
 8000498:	37b0      	adds	r7, #176	@ 0xb0
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	50040000 	.word	0x50040000
 80004a4:	40021000 	.word	0x40021000
 80004a8:	200000e4 	.word	0x200000e4
 80004ac:	40020008 	.word	0x40020008

080004b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <MX_DMA_Init+0x48>)
 80004b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ba:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <MX_DMA_Init+0x48>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80004c2:	4b0d      	ldr	r3, [pc, #52]	@ (80004f8 <MX_DMA_Init+0x48>)
 80004c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	200b      	movs	r0, #11
 80004d4:	f002 fc8f 	bl	8002df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d8:	200b      	movs	r0, #11
 80004da:	f002 fca8 	bl	8002e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	200f      	movs	r0, #15
 80004e4:	f002 fc87 	bl	8002df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004e8:	200f      	movs	r0, #15
 80004ea:	f002 fca0 	bl	8002e2e <HAL_NVIC_EnableIRQ>

}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	@ 0x28
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b48      	ldr	r3, [pc, #288]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000516:	4a47      	ldr	r2, [pc, #284]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051e:	4b45      	ldr	r3, [pc, #276]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	4b42      	ldr	r3, [pc, #264]	@ (8000634 <MX_GPIO_Init+0x138>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	4a41      	ldr	r2, [pc, #260]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000536:	4b3f      	ldr	r3, [pc, #252]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b3c      	ldr	r3, [pc, #240]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	4a3b      	ldr	r2, [pc, #236]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800054e:	4b39      	ldr	r3, [pc, #228]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b36      	ldr	r3, [pc, #216]	@ (8000634 <MX_GPIO_Init+0x138>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	4a35      	ldr	r2, [pc, #212]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000566:	4b33      	ldr	r3, [pc, #204]	@ (8000634 <MX_GPIO_Init+0x138>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2120      	movs	r1, #32
 8000576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057a:	f003 f82d 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f640 0104 	movw	r1, #2052	@ 0x804
 8000584:	482c      	ldr	r0, [pc, #176]	@ (8000638 <MX_GPIO_Init+0x13c>)
 8000586:	f003 f827 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000590:	4829      	ldr	r0, [pc, #164]	@ (8000638 <MX_GPIO_Init+0x13c>)
 8000592:	f003 f821 	bl	80035d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserButton_Pin */
  GPIO_InitStruct.Pin = UserButton_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserButton_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4823      	ldr	r0, [pc, #140]	@ (800063c <MX_GPIO_Init+0x140>)
 80005ae:	f002 fe51 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 80005b2:	2308      	movs	r3, #8
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005c2:	2307      	movs	r3, #7
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d0:	f002 fe40 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d4:	2320      	movs	r3, #32
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ee:	f002 fe31 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 80005f2:	f641 0304 	movw	r3, #6148	@ 0x1804
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	480b      	ldr	r0, [pc, #44]	@ (8000638 <MX_GPIO_Init+0x13c>)
 800060c:	f002 fe22 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_BTN_Pin */
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 8000610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f002 fe14 	bl	8003254 <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	@ 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400
 800063c:	48000800 	.word	0x48000800

08000640 <lcd_cmd>:
  CMD(ST7735S_MADCTL), 0xa0,
};


static void lcd_cmd(uint8_t cmd)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <lcd_cmd+0x44>)
 8000652:	f002 ffc1 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065c:	4809      	ldr	r0, [pc, #36]	@ (8000684 <lcd_cmd+0x44>)
 800065e:	f002 ffbb 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000662:	1df9      	adds	r1, r7, #7
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	2201      	movs	r2, #1
 800066a:	4807      	ldr	r0, [pc, #28]	@ (8000688 <lcd_cmd+0x48>)
 800066c:	f004 fb57 	bl	8004d1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000676:	4803      	ldr	r0, [pc, #12]	@ (8000684 <lcd_cmd+0x44>)
 8000678:	f002 ffae 	bl	80035d8 <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	48000400 	.word	0x48000400
 8000688:	2000a19c 	.word	0x2000a19c

0800068c <lcd_data>:

static void lcd_data(uint8_t data)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <lcd_data+0x44>)
 800069e:	f002 ff9b 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a8:	4809      	ldr	r0, [pc, #36]	@ (80006d0 <lcd_data+0x44>)
 80006aa:	f002 ff95 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80006ae:	1df9      	adds	r1, r7, #7
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	2201      	movs	r2, #1
 80006b6:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <lcd_data+0x48>)
 80006b8:	f004 fb31 	bl	8004d1e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c2:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <lcd_data+0x44>)
 80006c4:	f002 ff88 	bl	80035d8 <HAL_GPIO_WritePin>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	48000400 	.word	0x48000400
 80006d4:	2000a19c 	.word	0x2000a19c

080006d8 <lcd_send>:


static void lcd_send(uint16_t value)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d005      	beq.n	80006f8 <lcd_send+0x20>
		lcd_cmd(value);
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffa5 	bl	8000640 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80006f6:	e004      	b.n	8000702 <lcd_send+0x2a>
		lcd_data(value);
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ffc5 	bl	800068c <lcd_data>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <lcd_data16>:

static void lcd_data16(uint16_t value)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b29b      	uxth	r3, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ffb5 	bl	800068c <lcd_data>
	lcd_data(value);
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffb0 	bl	800068c <lcd_data>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8000742:	202a      	movs	r0, #42	@ 0x2a
 8000744:	f7ff ff7c 	bl	8000640 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	b29b      	uxth	r3, r3
 800074c:	3301      	adds	r3, #1
 800074e:	b29b      	uxth	r3, r3
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffda 	bl	800070a <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	b29a      	uxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	b29b      	uxth	r3, r3
 800075e:	4413      	add	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ffd1 	bl	800070a <lcd_data16>
  lcd_cmd(ST7735S_RASET);
 8000768:	202b      	movs	r0, #43	@ 0x2b
 800076a:	f7ff ff69 	bl	8000640 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	b29b      	uxth	r3, r3
 8000772:	3302      	adds	r3, #2
 8000774:	b29b      	uxth	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffc7 	bl	800070a <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	b29a      	uxth	r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b29b      	uxth	r3, r3
 8000784:	4413      	add	r3, r2
 8000786:	b29b      	uxth	r3, r3
 8000788:	3301      	adds	r3, #1
 800078a:	b29b      	uxth	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ffbc 	bl	800070a <lcd_data16>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <lcd_init>:

void lcd_init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  int i;
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2104      	movs	r1, #4
 80007a6:	4817      	ldr	r0, [pc, #92]	@ (8000804 <lcd_init+0x68>)
 80007a8:	f002 ff16 	bl	80035d8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80007ac:	2064      	movs	r0, #100	@ 0x64
 80007ae:	f001 f841 	bl	8001834 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2104      	movs	r1, #4
 80007b6:	4813      	ldr	r0, [pc, #76]	@ (8000804 <lcd_init+0x68>)
 80007b8:	f002 ff0e 	bl	80035d8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80007bc:	2064      	movs	r0, #100	@ 0x64
 80007be:	f001 f839 	bl	8001834 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	e009      	b.n	80007dc <lcd_init+0x40>
    lcd_send(init_table[i]);
 80007c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000808 <lcd_init+0x6c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff81 	bl	80006d8 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3301      	adds	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b4b      	cmp	r3, #75	@ 0x4b
 80007e0:	d9f2      	bls.n	80007c8 <lcd_init+0x2c>
  }
  HAL_Delay(200);
 80007e2:	20c8      	movs	r0, #200	@ 0xc8
 80007e4:	f001 f826 	bl	8001834 <HAL_Delay>
  lcd_cmd(ST7735S_SLPOUT);
 80007e8:	2011      	movs	r0, #17
 80007ea:	f7ff ff29 	bl	8000640 <lcd_cmd>
  HAL_Delay(120);
 80007ee:	2078      	movs	r0, #120	@ 0x78
 80007f0:	f001 f820 	bl	8001834 <HAL_Delay>
  lcd_cmd(ST7735S_DISPON);
 80007f4:	2029      	movs	r0, #41	@ 0x29
 80007f6:	f7ff ff23 	bl	8000640 <lcd_cmd>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	48000400 	.word	0x48000400
 8000808:	08006cb4 	.word	0x08006cb4

0800080c <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	4613      	mov	r3, r2
 8000818:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	015b      	lsls	r3, r3, #5
 8000824:	461a      	mov	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4413      	add	r3, r2
 800082a:	4905      	ldr	r1, [pc, #20]	@ (8000840 <lcd_put_pixel+0x34>)
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	2000012c 	.word	0x2000012c

08000844 <lcd_copy>:

void lcd_copy(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	22a0      	movs	r2, #160	@ 0xa0
 800084c:	2100      	movs	r1, #0
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ff70 	bl	8000734 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8000854:	202c      	movs	r0, #44	@ 0x2c
 8000856:	f7ff fef3 	bl	8000640 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <lcd_copy+0x40>)
 8000862:	f002 feb9 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800086c:	4805      	ldr	r0, [pc, #20]	@ (8000884 <lcd_copy+0x40>)
 800086e:	f002 feb3 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8000872:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000876:	4904      	ldr	r1, [pc, #16]	@ (8000888 <lcd_copy+0x44>)
 8000878:	4804      	ldr	r0, [pc, #16]	@ (800088c <lcd_copy+0x48>)
 800087a:	f004 fbc7 	bl	800500c <HAL_SPI_Transmit_DMA>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	48000400 	.word	0x48000400
 8000888:	2000012c 	.word	0x2000012c
 800088c:	2000a19c 	.word	0x2000a19c

08000890 <lcd_transfer_done>:

void lcd_transfer_done(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089a:	4802      	ldr	r0, [pc, #8]	@ (80008a4 <lcd_transfer_done+0x14>)
 800089c:	f002 fe9c 	bl	80035d8 <HAL_GPIO_WritePin>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	48000400 	.word	0x48000400

080008a8 <lcd_is_busy>:
bool lcd_is_busy(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY)
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <lcd_is_busy+0x1c>)
 80008ae:	f004 fcaf 	bl	8005210 <HAL_SPI_GetState>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d101      	bne.n	80008bc <lcd_is_busy+0x14>
		return true;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <lcd_is_busy+0x16>
	else
		return false;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000a19c 	.word	0x2000a19c

080008c8 <char_to_wchar>:
/* USER CODE BEGIN 0 */
uint16_t JOY[2];
uint16_t joy_x = 0, joy_y = 0;
uint8_t button_state;

void char_to_wchar(const char *src, wchar_t *dst, size_t max_len) {
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < max_len - 1 && src[i] != '\0'; i++) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e013      	b.n	8000902 <char_to_wchar+0x3a>
        dst[i] = (wchar_t)src[i];
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	4413      	add	r3, r2
 80008e0:	7819      	ldrb	r1, [r3, #0]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	460a      	mov	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
        dst[i+1] = 0; // zawsze zakończ na null
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	4413      	add	r3, r2
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < max_len - 1 && src[i] != '\0'; i++) {
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3b01      	subs	r3, #1
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	429a      	cmp	r2, r3
 800090a:	d205      	bcs.n	8000918 <char_to_wchar+0x50>
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1e0      	bne.n	80008da <char_to_wchar+0x12>
    }
}
 8000918:	bf00      	nop
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <HAL_SPI_TxCpltCallback+0x1c>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d101      	bne.n	8000938 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 8000934:	f7ff ffac 	bl	8000890 <lcd_transfer_done>
	}
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000a19c 	.word	0x2000a19c

08000944 <Read_Joystick_ADC>:

void Read_Joystick_ADC(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

	joy_x = JOY[0];
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <Read_Joystick_ADC+0x34>)
 800094a:	881a      	ldrh	r2, [r3, #0]
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <Read_Joystick_ADC+0x38>)
 800094e:	801a      	strh	r2, [r3, #0]

	joy_y = JOY[1];
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <Read_Joystick_ADC+0x34>)
 8000952:	885a      	ldrh	r2, [r3, #2]
 8000954:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <Read_Joystick_ADC+0x3c>)
 8000956:	801a      	strh	r2, [r3, #0]

	//joystick button state
    button_state = !HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin);
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	4809      	ldr	r0, [pc, #36]	@ (8000984 <Read_Joystick_ADC+0x40>)
 800095e:	f002 fe23 	bl	80035a8 <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf0c      	ite	eq
 8000968:	2301      	moveq	r3, #1
 800096a:	2300      	movne	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <Read_Joystick_ADC+0x44>)
 8000972:	701a      	strb	r2, [r3, #0]

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000a190 	.word	0x2000a190
 800097c:	2000a194 	.word	0x2000a194
 8000980:	2000a196 	.word	0x2000a196
 8000984:	48000800 	.word	0x48000800
 8000988:	2000a198 	.word	0x2000a198

0800098c <draw_image>:

void draw_image(uint8_t offset_x, uint8_t offset_y, uint8_t width, uint8_t height, uint16_t *image){
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	4604      	mov	r4, r0
 8000994:	4608      	mov	r0, r1
 8000996:	4611      	mov	r1, r2
 8000998:	461a      	mov	r2, r3
 800099a:	4623      	mov	r3, r4
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	4603      	mov	r3, r0
 80009a0:	71bb      	strb	r3, [r7, #6]
 80009a2:	460b      	mov	r3, r1
 80009a4:	717b      	strb	r3, [r7, #5]
 80009a6:	4613      	mov	r3, r2
 80009a8:	713b      	strb	r3, [r7, #4]
    for(uint8_t y = 0; y < height; y++){
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]
 80009ae:	e029      	b.n	8000a04 <draw_image+0x78>
        for(uint8_t x = 0; x < width; x++){
 80009b0:	2300      	movs	r3, #0
 80009b2:	73bb      	strb	r3, [r7, #14]
 80009b4:	e01f      	b.n	80009f6 <draw_image+0x6a>
            uint16_t pixel = image[y * width + x];
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	797a      	ldrb	r2, [r7, #5]
 80009ba:	fb03 f202 	mul.w	r2, r3, r2
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	4413      	add	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	6a3a      	ldr	r2, [r7, #32]
 80009c6:	4413      	add	r3, r2
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	81bb      	strh	r3, [r7, #12]
            hagl_put_pixel(offset_x + x, offset_y + y, pixel);
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	7bbb      	ldrb	r3, [r7, #14]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b218      	sxth	r0, r3
 80009da:	79bb      	ldrb	r3, [r7, #6]
 80009dc:	b29a      	uxth	r2, r3
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	4413      	add	r3, r2
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	89ba      	ldrh	r2, [r7, #12]
 80009ea:	4619      	mov	r1, r3
 80009ec:	f005 f874 	bl	8005ad8 <hagl_put_pixel>
        for(uint8_t x = 0; x < width; x++){
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	3301      	adds	r3, #1
 80009f4:	73bb      	strb	r3, [r7, #14]
 80009f6:	7bba      	ldrb	r2, [r7, #14]
 80009f8:	797b      	ldrb	r3, [r7, #5]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3db      	bcc.n	80009b6 <draw_image+0x2a>
    for(uint8_t y = 0; y < height; y++){
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3301      	adds	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
 8000a04:	7bfa      	ldrb	r2, [r7, #15]
 8000a06:	793b      	ldrb	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d3d1      	bcc.n	80009b0 <draw_image+0x24>
        }
    }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}

08000a16 <restart_wave.0>:
  uint8_t enemy_move_down = 0;
  uint8_t hp = 3;
  uint8_t game_over = 0;
  uint8_t lowest_enemy_position = 0;

  void restart_wave(){
 8000a16:	b480      	push	{r7}
 8000a18:	b085      	sub	sp, #20
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4663      	mov	r3, ip
 8000a1e:	f8c7 c004 	str.w	ip, [r7, #4]
	  lowest_enemy_position = 0;
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	  enemy_move_down = 0;
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	  enemy_direction = -1;
 8000a2e:	22ff      	movs	r2, #255	@ 0xff
 8000a30:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	  enemy_change_direction = 0;
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	  anim_counter = 0;
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	  alive_enemy_count = 21;
 8000a40:	2215      	movs	r2, #21
 8000a42:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	  enemy_bullet_position_y = 0;
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	  for(uint8_t i = 0; i < TOTAL_ENEMY_COUNT; i++){
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	73fa      	strb	r2, [r7, #15]
 8000a50:	e017      	b.n	8000a82 <restart_wave.0+0x6c>
		  enemy_types[i] = original_enemy_types[i];
 8000a52:	7bf9      	ldrb	r1, [r7, #15]
 8000a54:	7bfa      	ldrb	r2, [r7, #15]
 8000a56:	4419      	add	r1, r3
 8000a58:	f891 1069 	ldrb.w	r1, [r1, #105]	@ 0x69
 8000a5c:	441a      	add	r2, r3
 8000a5e:	f882 1054 	strb.w	r1, [r2, #84]	@ 0x54
		  enemy_positions_x[i] = original_enemy_positions_x[i];
 8000a62:	7bf9      	ldrb	r1, [r7, #15]
 8000a64:	7bfa      	ldrb	r2, [r7, #15]
 8000a66:	4419      	add	r1, r3
 8000a68:	f891 103f 	ldrb.w	r1, [r1, #63]	@ 0x3f
 8000a6c:	441a      	add	r2, r3
 8000a6e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
		  enemy_positions_y[i] = original_enemy_positions_y[i];
 8000a72:	7bf9      	ldrb	r1, [r7, #15]
 8000a74:	7bfa      	ldrb	r2, [r7, #15]
 8000a76:	4419      	add	r1, r3
 8000a78:	7d49      	ldrb	r1, [r1, #21]
 8000a7a:	5499      	strb	r1, [r3, r2]
	  for(uint8_t i = 0; i < TOTAL_ENEMY_COUNT; i++){
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	3201      	adds	r2, #1
 8000a80:	73fa      	strb	r2, [r7, #15]
 8000a82:	7bfa      	ldrb	r2, [r7, #15]
 8000a84:	2a14      	cmp	r2, #20
 8000a86:	d9e4      	bls.n	8000a52 <restart_wave.0+0x3c>
	  }
  }
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <main>:
{
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b0aa      	sub	sp, #168	@ 0xa8
 8000a9c:	af02      	add	r7, sp, #8
int main(void)
 8000a9e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HAL_Init();
 8000aa6:	f000 fe49 	bl	800173c <HAL_Init>
  SystemClock_Config();
 8000aaa:	f000 fc47 	bl	800133c <SystemClock_Config>
  MX_GPIO_Init();
 8000aae:	f7ff fd25 	bl	80004fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab2:	f7ff fcfd 	bl	80004b0 <MX_DMA_Init>
  MX_SPI2_Init();
 8000ab6:	f000 fc99 	bl	80013ec <MX_SPI2_Init>
  MX_ADC1_Init();
 8000aba:	f7ff fbd9 	bl	8000270 <MX_ADC1_Init>
  HAL_ADC_Start_DMA(&hadc1, JOY, 2);
 8000abe:	2202      	movs	r2, #2
 8000ac0:	49b8      	ldr	r1, [pc, #736]	@ (8000da4 <main+0x30c>)
 8000ac2:	48b9      	ldr	r0, [pc, #740]	@ (8000da8 <main+0x310>)
 8000ac4:	f001 fa00 	bl	8001ec8 <HAL_ADC_Start_DMA>
  lcd_init();
 8000ac8:	f7ff fe68 	bl	800079c <lcd_init>
  int8_t movement_vertical = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
  int8_t movement_horizontal = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
  uint8_t player_position = 80;
 8000ad8:	2350      	movs	r3, #80	@ 0x50
 8000ada:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  uint8_t bullet_position_x = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  uint8_t bullet_position_y = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
  uint8_t bullet_speed = 6;
 8000aea:	2306      	movs	r3, #6
 8000aec:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
  uint8_t enemy_bullet_position_x = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
  uint8_t enemy_bullet_position_y = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
  uint8_t enemy_bullet_speed = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint8_t alive_enemy_count = 21;
 8000b02:	2315      	movs	r3, #21
 8000b04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  const uint8_t original_enemy_types[] =       { 3,  3,  3,  3,  3,  3,   3  , 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2};
 8000b08:	4ba8      	ldr	r3, [pc, #672]	@ (8000dac <main+0x314>)
 8000b0a:	f107 0569 	add.w	r5, r7, #105	@ 0x69
 8000b0e:	461c      	mov	r4, r3
 8000b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b12:	6028      	str	r0, [r5, #0]
 8000b14:	6069      	str	r1, [r5, #4]
 8000b16:	60aa      	str	r2, [r5, #8]
 8000b18:	60eb      	str	r3, [r5, #12]
 8000b1a:	6820      	ldr	r0, [r4, #0]
 8000b1c:	6128      	str	r0, [r5, #16]
 8000b1e:	7923      	ldrb	r3, [r4, #4]
 8000b20:	752b      	strb	r3, [r5, #20]
  const uint8_t original_enemy_positions_x[] = { 10, 30, 50, 70, 90, 110, 130, 10, 30, 50, 70, 90, 110, 130, 10, 30, 50, 70, 90, 110, 130 };
 8000b22:	4ba3      	ldr	r3, [pc, #652]	@ (8000db0 <main+0x318>)
 8000b24:	f107 053f 	add.w	r5, r7, #63	@ 0x3f
 8000b28:	461c      	mov	r4, r3
 8000b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2c:	6028      	str	r0, [r5, #0]
 8000b2e:	6069      	str	r1, [r5, #4]
 8000b30:	60aa      	str	r2, [r5, #8]
 8000b32:	60eb      	str	r3, [r5, #12]
 8000b34:	6820      	ldr	r0, [r4, #0]
 8000b36:	6128      	str	r0, [r5, #16]
 8000b38:	7923      	ldrb	r3, [r4, #4]
 8000b3a:	752b      	strb	r3, [r5, #20]
  const uint8_t original_enemy_positions_y[] = { 20, 20, 20, 20, 20, 20,  20, 30, 30, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40};
 8000b3c:	4b9d      	ldr	r3, [pc, #628]	@ (8000db4 <main+0x31c>)
 8000b3e:	f107 0515 	add.w	r5, r7, #21
 8000b42:	461c      	mov	r4, r3
 8000b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b46:	6028      	str	r0, [r5, #0]
 8000b48:	6069      	str	r1, [r5, #4]
 8000b4a:	60aa      	str	r2, [r5, #8]
 8000b4c:	60eb      	str	r3, [r5, #12]
 8000b4e:	6820      	ldr	r0, [r4, #0]
 8000b50:	6128      	str	r0, [r5, #16]
 8000b52:	7923      	ldrb	r3, [r4, #4]
 8000b54:	752b      	strb	r3, [r5, #20]
  uint8_t enemy_types[] =       { 3,  3,  3,  3,  3,  3,   3  , 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2};
 8000b56:	4b95      	ldr	r3, [pc, #596]	@ (8000dac <main+0x314>)
 8000b58:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000b5c:	461d      	mov	r5, r3
 8000b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b66:	6020      	str	r0, [r4, #0]
 8000b68:	3404      	adds	r4, #4
 8000b6a:	7021      	strb	r1, [r4, #0]
  uint8_t enemy_positions_x[] = { 10, 30, 50, 70, 90, 110, 130, 10, 30, 50, 70, 90, 110, 130, 10, 30, 50, 70, 90, 110, 130 };
 8000b6c:	4b90      	ldr	r3, [pc, #576]	@ (8000db0 <main+0x318>)
 8000b6e:	f107 052a 	add.w	r5, r7, #42	@ 0x2a
 8000b72:	461c      	mov	r4, r3
 8000b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b76:	6028      	str	r0, [r5, #0]
 8000b78:	6069      	str	r1, [r5, #4]
 8000b7a:	60aa      	str	r2, [r5, #8]
 8000b7c:	60eb      	str	r3, [r5, #12]
 8000b7e:	6820      	ldr	r0, [r4, #0]
 8000b80:	6128      	str	r0, [r5, #16]
 8000b82:	7923      	ldrb	r3, [r4, #4]
 8000b84:	752b      	strb	r3, [r5, #20]
  uint8_t enemy_positions_y[] = { 20, 20, 20, 20, 20, 20,  20, 30, 30, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40};
 8000b86:	4b8b      	ldr	r3, [pc, #556]	@ (8000db4 <main+0x31c>)
 8000b88:	463c      	mov	r4, r7
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b94:	6020      	str	r0, [r4, #0]
 8000b96:	3404      	adds	r4, #4
 8000b98:	7021      	strb	r1, [r4, #0]
  uint16_t score = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  uint16_t high_score = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
  uint8_t anim_counter = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  uint8_t enemy_direction = -1;
 8000bac:	23ff      	movs	r3, #255	@ 0xff
 8000bae:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  uint8_t enemy_change_direction = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  uint8_t enemy_move_down = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
  uint8_t hp = 3;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
  uint8_t game_over = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  uint8_t lowest_enemy_position = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
  while(HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_SET && HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_SET){
 8000bd0:	e01e      	b.n	8000c10 <main+0x178>
		hagl_clear_screen();
 8000bd2:	f005 faab 	bl	800612c <hagl_clear_screen>
		hagl_put_text(L"Press UserButton to start", 2, 100, WHITE, font6x9);
 8000bd6:	4b78      	ldr	r3, [pc, #480]	@ (8000db8 <main+0x320>)
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bde:	2264      	movs	r2, #100	@ 0x64
 8000be0:	2102      	movs	r1, #2
 8000be2:	4876      	ldr	r0, [pc, #472]	@ (8000dbc <main+0x324>)
 8000be4:	f005 fa1a 	bl	800601c <hagl_put_text>
		hagl_put_text(L"ALIEN", 62, 50, WHITE, font6x9);
 8000be8:	4b73      	ldr	r3, [pc, #460]	@ (8000db8 <main+0x320>)
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bf0:	2232      	movs	r2, #50	@ 0x32
 8000bf2:	213e      	movs	r1, #62	@ 0x3e
 8000bf4:	4872      	ldr	r0, [pc, #456]	@ (8000dc0 <main+0x328>)
 8000bf6:	f005 fa11 	bl	800601c <hagl_put_text>
		hagl_put_text(L"INVADERS", 55, 60, WHITE, font6x9);
 8000bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8000db8 <main+0x320>)
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c02:	223c      	movs	r2, #60	@ 0x3c
 8000c04:	2137      	movs	r1, #55	@ 0x37
 8000c06:	486f      	ldr	r0, [pc, #444]	@ (8000dc4 <main+0x32c>)
 8000c08:	f005 fa08 	bl	800601c <hagl_put_text>
		lcd_copy();
 8000c0c:	f7ff fe1a 	bl	8000844 <lcd_copy>
  while(HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_SET && HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_SET){
 8000c10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c18:	f002 fcc6 	bl	80035a8 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d000      	beq.n	8000c24 <main+0x18c>
 8000c22:	e008      	b.n	8000c36 <main+0x19e>
 8000c24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2c:	f002 fcbc 	bl	80035a8 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d0cd      	beq.n	8000bd2 <main+0x13a>
  }

  while (1)
  {
	  	if(HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_RESET) {
 8000c36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3e:	f002 fcb3 	bl	80035a8 <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d008      	beq.n	8000c5a <main+0x1c2>
 8000c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c50:	f002 fcaa 	bl	80035a8 <HAL_GPIO_ReadPin>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d106      	bne.n	8000c68 <main+0x1d0>
	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c62:	f002 fcb9 	bl	80035d8 <HAL_GPIO_WritePin>
 8000c66:	e005      	b.n	8000c74 <main+0x1dc>
	  	} else {
	  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c70:	f002 fcb2 	bl	80035d8 <HAL_GPIO_WritePin>
	  	}
	    Read_Joystick_ADC();
 8000c74:	f7ff fe66 	bl	8000944 <Read_Joystick_ADC>
	  	if (!lcd_is_busy()){
 8000c78:	f7ff fe16 	bl	80008a8 <lcd_is_busy>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	f083 0301 	eor.w	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0d6      	beq.n	8000c36 <main+0x19e>
	  		if(game_over){
 8000c88:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d05e      	beq.n	8000d4e <main+0x2b6>
	  			hagl_clear_screen();
 8000c90:	f005 fa4c 	bl	800612c <hagl_clear_screen>
	  			hagl_put_text(L"GAME OVER", 50, 50, RED, font6x9);
 8000c94:	4b48      	ldr	r3, [pc, #288]	@ (8000db8 <main+0x320>)
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	23f8      	movs	r3, #248	@ 0xf8
 8000c9a:	2232      	movs	r2, #50	@ 0x32
 8000c9c:	2132      	movs	r1, #50	@ 0x32
 8000c9e:	484a      	ldr	r0, [pc, #296]	@ (8000dc8 <main+0x330>)
 8000ca0:	f005 f9bc 	bl	800601c <hagl_put_text>
				 sprintf(str,  "SCORE: %d", score);
 8000ca4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4948      	ldr	r1, [pc, #288]	@ (8000dcc <main+0x334>)
 8000cac:	4848      	ldr	r0, [pc, #288]	@ (8000dd0 <main+0x338>)
 8000cae:	f005 fa67 	bl	8006180 <siprintf>
				 char_to_wchar(str, wstr, 20);
 8000cb2:	2214      	movs	r2, #20
 8000cb4:	4947      	ldr	r1, [pc, #284]	@ (8000dd4 <main+0x33c>)
 8000cb6:	4846      	ldr	r0, [pc, #280]	@ (8000dd0 <main+0x338>)
 8000cb8:	f7ff fe06 	bl	80008c8 <char_to_wchar>
				 hagl_put_text(wstr, 50, 60, RED, font6x9);
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8000db8 <main+0x320>)
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	23f8      	movs	r3, #248	@ 0xf8
 8000cc2:	223c      	movs	r2, #60	@ 0x3c
 8000cc4:	2132      	movs	r1, #50	@ 0x32
 8000cc6:	4843      	ldr	r0, [pc, #268]	@ (8000dd4 <main+0x33c>)
 8000cc8:	f005 f9a8 	bl	800601c <hagl_put_text>
				 if(score > high_score){
 8000ccc:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 8000cd0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d908      	bls.n	8000cea <main+0x252>
					 hagl_put_text(L"NEW HIGHSCORE!", 30, 70, WHITE, font6x9);
 8000cd8:	4b37      	ldr	r3, [pc, #220]	@ (8000db8 <main+0x320>)
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ce0:	2246      	movs	r2, #70	@ 0x46
 8000ce2:	211e      	movs	r1, #30
 8000ce4:	483c      	ldr	r0, [pc, #240]	@ (8000dd8 <main+0x340>)
 8000ce6:	f005 f999 	bl	800601c <hagl_put_text>
				 }
				 hagl_put_text(L"Press UserButton to restart", 0, 100, WHITE, font6x9);
 8000cea:	4b33      	ldr	r3, [pc, #204]	@ (8000db8 <main+0x320>)
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf2:	2264      	movs	r2, #100	@ 0x64
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4839      	ldr	r0, [pc, #228]	@ (8000ddc <main+0x344>)
 8000cf8:	f005 f990 	bl	800601c <hagl_put_text>
				 if(HAL_GPIO_ReadPin(UserButton_GPIO_Port, UserButton_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_RESET) {
 8000cfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d00:	4837      	ldr	r0, [pc, #220]	@ (8000de0 <main+0x348>)
 8000d02:	f002 fc51 	bl	80035a8 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d008      	beq.n	8000d1e <main+0x286>
 8000d0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d14:	f002 fc48 	bl	80035a8 <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d112      	bne.n	8000d44 <main+0x2ac>
				  	  game_over = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
				  	  hp = 3;
 8000d24:	2303      	movs	r3, #3
 8000d26:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
				  	  if(score > high_score){
 8000d2a:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 8000d2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d903      	bls.n	8000d3e <main+0x2a6>
						high_score = score;
 8000d36:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8000d3a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
				  	  }
				  	  score = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
				  	}
				 restart_wave();
 8000d44:	463b      	mov	r3, r7
 8000d46:	469c      	mov	ip, r3
 8000d48:	f7ff fe65 	bl	8000a16 <restart_wave.0>
 8000d4c:	e2e4      	b.n	8001318 <main+0x880>
	  		}
	  		else{
	  		  if(alive_enemy_count == 0){
 8000d4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <main+0x2c6>
	  			  restart_wave();
 8000d56:	463b      	mov	r3, r7
 8000d58:	469c      	mov	ip, r3
 8000d5a:	f7ff fe5c 	bl	8000a16 <restart_wave.0>
	  		  }
	  		  if(hp==0 || lowest_enemy_position > 100){
 8000d5e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <main+0x2d6>
 8000d66:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8000d6a:	2b64      	cmp	r3, #100	@ 0x64
 8000d6c:	d902      	bls.n	8000d74 <main+0x2dc>
	  			  game_over = 1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	  		  }

			  if(enemy_change_direction){
 8000d74:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d008      	beq.n	8000d8e <main+0x2f6>
				  enemy_direction = -enemy_direction;
 8000d7c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8000d80:	425b      	negs	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
				  enemy_change_direction = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
			  }
			  if(enemy_move_down){
 8000d8e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d045      	beq.n	8000e22 <main+0x38a>
				  enemy_move_down = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
				  for(uint8_t i = 0; i < TOTAL_ENEMY_COUNT; i++){
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8000da2:	e03a      	b.n	8000e1a <main+0x382>
 8000da4:	2000a190 	.word	0x2000a190
 8000da8:	20000080 	.word	0x20000080
 8000dac:	08006c6c 	.word	0x08006c6c
 8000db0:	08006c84 	.word	0x08006c84
 8000db4:	08006c9c 	.word	0x08006c9c
 8000db8:	08006d4c 	.word	0x08006d4c
 8000dbc:	08006ad8 	.word	0x08006ad8
 8000dc0:	08006b40 	.word	0x08006b40
 8000dc4:	08006b58 	.word	0x08006b58
 8000dc8:	08006b7c 	.word	0x08006b7c
 8000dcc:	08006ba4 	.word	0x08006ba4
 8000dd0:	2000a12c 	.word	0x2000a12c
 8000dd4:	2000a140 	.word	0x2000a140
 8000dd8:	08006bb0 	.word	0x08006bb0
 8000ddc:	08006bec 	.word	0x08006bec
 8000de0:	48000800 	.word	0x48000800
					  if(enemy_positions_y[i] != 0)
 8000de4:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000de8:	33a0      	adds	r3, #160	@ 0xa0
 8000dea:	443b      	add	r3, r7
 8000dec:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00d      	beq.n	8000e10 <main+0x378>
						  enemy_positions_y[i] += 5;
 8000df4:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000df8:	33a0      	adds	r3, #160	@ 0xa0
 8000dfa:	443b      	add	r3, r7
 8000dfc:	f813 2ca0 	ldrb.w	r2, [r3, #-160]
 8000e00:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000e04:	3205      	adds	r2, #5
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	33a0      	adds	r3, #160	@ 0xa0
 8000e0a:	443b      	add	r3, r7
 8000e0c:	f803 2ca0 	strb.w	r2, [r3, #-160]
				  for(uint8_t i = 0; i < TOTAL_ENEMY_COUNT; i++){
 8000e10:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000e14:	3301      	adds	r3, #1
 8000e16:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8000e1a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8000e1e:	2b14      	cmp	r3, #20
 8000e20:	d9e0      	bls.n	8000de4 <main+0x34c>
				  }
			  }
	  		  anim_counter++;
 8000e22:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8000e26:	3301      	adds	r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
	  		  if(anim_counter > 30)
 8000e2e:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8000e32:	2b1e      	cmp	r3, #30
 8000e34:	d902      	bls.n	8000e3c <main+0x3a4>
	  			  anim_counter = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
			  hagl_clear_screen();
 8000e3c:	f005 f976 	bl	800612c <hagl_clear_screen>
//			  for (int i = 0; i < 8; i++) {
//				  hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
//			  }

			  // read user input
			  if(joy_x < 1000){
 8000e40:	4bc1      	ldr	r3, [pc, #772]	@ (8001148 <main+0x6b0>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e48:	d203      	bcs.n	8000e52 <main+0x3ba>
//				  sprintf(str, "up");
				  movement_vertical = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8000e50:	e00b      	b.n	8000e6a <main+0x3d2>
			  }
			  else if(joy_x > 4000){
 8000e52:	4bbd      	ldr	r3, [pc, #756]	@ (8001148 <main+0x6b0>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000e5a:	d903      	bls.n	8000e64 <main+0x3cc>
//				  sprintf(str, "down");
				  movement_vertical = -2;
 8000e5c:	23fe      	movs	r3, #254	@ 0xfe
 8000e5e:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8000e62:	e002      	b.n	8000e6a <main+0x3d2>
			  }
			  else{
//				  sprintf(str, "center");
				  movement_vertical = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
			  }
//			  char_to_wchar(str, wstr, 20);
//			  hagl_put_text(wstr, 10, 10, RED, font6x9);
			  if(joy_y < 1000){
 8000e6a:	4bb8      	ldr	r3, [pc, #736]	@ (800114c <main+0x6b4>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e72:	d203      	bcs.n	8000e7c <main+0x3e4>
//				  sprintf(str, "right");
				  movement_horizontal = 2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000e7a:	e00b      	b.n	8000e94 <main+0x3fc>
			  }
			  else if(joy_y > 4000){
 8000e7c:	4bb3      	ldr	r3, [pc, #716]	@ (800114c <main+0x6b4>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000e84:	d903      	bls.n	8000e8e <main+0x3f6>
//				  sprintf(str, "left");
				  movement_horizontal = -2;
 8000e86:	23fe      	movs	r3, #254	@ 0xfe
 8000e88:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000e8c:	e002      	b.n	8000e94 <main+0x3fc>
			  }
			  else{
//				  sprintf(str, "center");
				  movement_horizontal = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			  }
//			  char_to_wchar(str, wstr, 20);
//			  hagl_put_text(wstr, 10, 20, RED, font6x9);
			  sprintf(str, "SCORE: %d", score);
 8000e94:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8000e98:	461a      	mov	r2, r3
 8000e9a:	49ad      	ldr	r1, [pc, #692]	@ (8001150 <main+0x6b8>)
 8000e9c:	48ad      	ldr	r0, [pc, #692]	@ (8001154 <main+0x6bc>)
 8000e9e:	f005 f96f 	bl	8006180 <siprintf>
			  char_to_wchar(str, wstr, 20);
 8000ea2:	2214      	movs	r2, #20
 8000ea4:	49ac      	ldr	r1, [pc, #688]	@ (8001158 <main+0x6c0>)
 8000ea6:	48ab      	ldr	r0, [pc, #684]	@ (8001154 <main+0x6bc>)
 8000ea8:	f7ff fd0e 	bl	80008c8 <char_to_wchar>
			  hagl_put_text(wstr, 10, 10, WHITE, font6x9);
 8000eac:	4bab      	ldr	r3, [pc, #684]	@ (800115c <main+0x6c4>)
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eb4:	220a      	movs	r2, #10
 8000eb6:	210a      	movs	r1, #10
 8000eb8:	48a7      	ldr	r0, [pc, #668]	@ (8001158 <main+0x6c0>)
 8000eba:	f005 f8af 	bl	800601c <hagl_put_text>

			  sprintf(str, "HIGH SCORE: %d", high_score);
 8000ebe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	49a6      	ldr	r1, [pc, #664]	@ (8001160 <main+0x6c8>)
 8000ec6:	48a3      	ldr	r0, [pc, #652]	@ (8001154 <main+0x6bc>)
 8000ec8:	f005 f95a 	bl	8006180 <siprintf>
			  char_to_wchar(str, wstr, 20);
 8000ecc:	2214      	movs	r2, #20
 8000ece:	49a2      	ldr	r1, [pc, #648]	@ (8001158 <main+0x6c0>)
 8000ed0:	48a0      	ldr	r0, [pc, #640]	@ (8001154 <main+0x6bc>)
 8000ed2:	f7ff fcf9 	bl	80008c8 <char_to_wchar>
			  hagl_put_text(wstr, 70, 10, WHITE, font6x9);
 8000ed6:	4ba1      	ldr	r3, [pc, #644]	@ (800115c <main+0x6c4>)
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ede:	220a      	movs	r2, #10
 8000ee0:	2146      	movs	r1, #70	@ 0x46
 8000ee2:	489d      	ldr	r0, [pc, #628]	@ (8001158 <main+0x6c0>)
 8000ee4:	f005 f89a 	bl	800601c <hagl_put_text>


			  // update player position
			  player_position += movement_horizontal;
 8000ee8:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000eec:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000ef0:	4413      	add	r3, r2
 8000ef2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			  if(player_position < 2)
 8000ef6:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d802      	bhi.n	8000f04 <main+0x46c>
				  player_position = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			  if(player_position > 147)
 8000f04:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000f08:	2b93      	cmp	r3, #147	@ 0x93
 8000f0a:	d902      	bls.n	8000f12 <main+0x47a>
				  player_position = 147;
 8000f0c:	2393      	movs	r3, #147	@ 0x93
 8000f0e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			  draw_image(player_position, 100, 12, 12, sprite_player);
 8000f12:	f897 009e 	ldrb.w	r0, [r7, #158]	@ 0x9e
 8000f16:	4b93      	ldr	r3, [pc, #588]	@ (8001164 <main+0x6cc>)
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	2164      	movs	r1, #100	@ 0x64
 8000f20:	f7ff fd34 	bl	800098c <draw_image>

			  //update bullet position
			  if(bullet_position_y == 0){
 8000f24:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d107      	bne.n	8000f3c <main+0x4a4>
				  bullet_position_x = player_position + 5;
 8000f2c:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000f30:	3305      	adds	r3, #5
 8000f32:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
				  bullet_position_y = 99;
 8000f36:	2363      	movs	r3, #99	@ 0x63
 8000f38:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
			  }
			  bullet_position_y -= bullet_speed;
 8000f3c:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8000f40:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c

			  if(bullet_position_y < 20){
 8000f4a:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000f4e:	2b13      	cmp	r3, #19
 8000f50:	d802      	bhi.n	8000f58 <main+0x4c0>
				  bullet_position_y = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
			  }

			  draw_image(bullet_position_x, bullet_position_y, 3, 4, sprite_bullet);
 8000f58:	f897 109c 	ldrb.w	r1, [r7, #156]	@ 0x9c
 8000f5c:	f897 009d 	ldrb.w	r0, [r7, #157]	@ 0x9d
 8000f60:	4b81      	ldr	r3, [pc, #516]	@ (8001168 <main+0x6d0>)
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2304      	movs	r3, #4
 8000f66:	2203      	movs	r2, #3
 8000f68:	f7ff fd10 	bl	800098c <draw_image>

			  //update enemy bullet position
			  if(enemy_bullet_position_y == 0){
 8000f6c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10b      	bne.n	8000f8c <main+0x4f4>
				  enemy_bullet_position_x = player_position + 5;
 8000f74:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000f78:	3305      	adds	r3, #5
 8000f7a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
				  enemy_bullet_position_y = lowest_enemy_position;
 8000f7e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8000f82:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		  		  lowest_enemy_position = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
			  }
			  enemy_bullet_position_y += enemy_bullet_speed;
 8000f8c:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8000f90:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000f94:	4413      	add	r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

			  if(enemy_bullet_position_y > 120){
 8000f9c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000fa0:	2b78      	cmp	r3, #120	@ 0x78
 8000fa2:	d902      	bls.n	8000faa <main+0x512>
				  enemy_bullet_position_y = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
			  }

			  draw_image(enemy_bullet_position_x, enemy_bullet_position_y, 3, 4, sprite_enemy_bullet);
 8000faa:	f897 107e 	ldrb.w	r1, [r7, #126]	@ 0x7e
 8000fae:	f897 009b 	ldrb.w	r0, [r7, #155]	@ 0x9b
 8000fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800116c <main+0x6d4>)
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	2203      	movs	r2, #3
 8000fba:	f7ff fce7 	bl	800098c <draw_image>

			  if(((enemy_bullet_position_x - player_position) < 12 && (enemy_bullet_position_x - player_position) > 0 && (enemy_bullet_position_y - 100) < 8 && (enemy_bullet_position_y - 100) > 0)){
 8000fbe:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8000fc2:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b0b      	cmp	r3, #11
 8000fca:	dc16      	bgt.n	8000ffa <main+0x562>
 8000fcc:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8000fd0:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dd0f      	ble.n	8000ffa <main+0x562>
 8000fda:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000fde:	2b6b      	cmp	r3, #107	@ 0x6b
 8000fe0:	d80b      	bhi.n	8000ffa <main+0x562>
 8000fe2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000fe6:	2b64      	cmp	r3, #100	@ 0x64
 8000fe8:	d907      	bls.n	8000ffa <main+0x562>
				  enemy_bullet_position_y = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
				  hp--;
 8000ff0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
			  }

			  //drawing enemies
			  for(uint8_t i = 0; i < TOTAL_ENEMY_COUNT; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 8001000:	e16d      	b.n	80012de <main+0x846>
				  //skip if dead
				  if(enemy_positions_y[i] == 0)
 8001002:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001006:	33a0      	adds	r3, #160	@ 0xa0
 8001008:	443b      	add	r3, r7
 800100a:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 815f 	beq.w	80012d2 <main+0x83a>
					  continue;
				  //update lowest enemy position
				  if(enemy_positions_y[i] > lowest_enemy_position)
 8001014:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001018:	33a0      	adds	r3, #160	@ 0xa0
 800101a:	443b      	add	r3, r7
 800101c:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 8001020:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <main+0x5a0>
					  lowest_enemy_position = enemy_positions_y[i];
 8001028:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800102c:	33a0      	adds	r3, #160	@ 0xa0
 800102e:	443b      	add	r3, r7
 8001030:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 8001034:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
				  //detect collisions
				  if(((bullet_position_x - enemy_positions_x[i]) < 12 && (bullet_position_x - enemy_positions_x[i]) > 0 && (bullet_position_y - enemy_positions_y[i]) < 8 && (bullet_position_y - enemy_positions_y[i]) > 0)){
 8001038:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 800103c:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 8001040:	32a0      	adds	r2, #160	@ 0xa0
 8001042:	443a      	add	r2, r7
 8001044:	f812 2c76 	ldrb.w	r2, [r2, #-118]
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	2b0b      	cmp	r3, #11
 800104c:	dc59      	bgt.n	8001102 <main+0x66a>
 800104e:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001052:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 8001056:	32a0      	adds	r2, #160	@ 0xa0
 8001058:	443a      	add	r2, r7
 800105a:	f812 2c76 	ldrb.w	r2, [r2, #-118]
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	dd4e      	ble.n	8001102 <main+0x66a>
 8001064:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8001068:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 800106c:	32a0      	adds	r2, #160	@ 0xa0
 800106e:	443a      	add	r2, r7
 8001070:	f812 2ca0 	ldrb.w	r2, [r2, #-160]
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	2b07      	cmp	r3, #7
 8001078:	dc43      	bgt.n	8001102 <main+0x66a>
 800107a:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800107e:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 8001082:	32a0      	adds	r2, #160	@ 0xa0
 8001084:	443a      	add	r2, r7
 8001086:	f812 2ca0 	ldrb.w	r2, [r2, #-160]
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	dd38      	ble.n	8001102 <main+0x66a>
					  bullet_position_y = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
					  draw_image(enemy_positions_x[i], enemy_positions_y[i], 12, 8, sprite_explosion);
 8001096:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800109a:	33a0      	adds	r3, #160	@ 0xa0
 800109c:	443b      	add	r3, r7
 800109e:	f813 0c76 	ldrb.w	r0, [r3, #-118]
 80010a2:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80010a6:	33a0      	adds	r3, #160	@ 0xa0
 80010a8:	443b      	add	r3, r7
 80010aa:	f813 1ca0 	ldrb.w	r1, [r3, #-160]
 80010ae:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <main+0x6d8>)
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2308      	movs	r3, #8
 80010b4:	220c      	movs	r2, #12
 80010b6:	f7ff fc69 	bl	800098c <draw_image>
					  enemy_positions_y[i] = 0;
 80010ba:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80010be:	33a0      	adds	r3, #160	@ 0xa0
 80010c0:	443b      	add	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	f803 2ca0 	strb.w	r2, [r3, #-160]
					  if(score < 999)
 80010c8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 80010cc:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d804      	bhi.n	80010de <main+0x646>
						  score++;
 80010d4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 80010d8:	3301      	adds	r3, #1
 80010da:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
					  alive_enemy_count--;
 80010de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
					  if(alive_enemy_count == 2){
 80010ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	f040 80f0 	bne.w	80012d4 <main+0x83c>
						  enemy_direction *= 2;
 80010f4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
					  if(alive_enemy_count == 2){
 8001100:	e0e8      	b.n	80012d4 <main+0x83c>
					  }
				  }
				  else {
					  enemy_positions_x[i] += enemy_direction;
 8001102:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001106:	33a0      	adds	r3, #160	@ 0xa0
 8001108:	443b      	add	r3, r7
 800110a:	f813 2c76 	ldrb.w	r2, [r3, #-118]
 800110e:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001112:	f897 1082 	ldrb.w	r1, [r7, #130]	@ 0x82
 8001116:	440a      	add	r2, r1
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	33a0      	adds	r3, #160	@ 0xa0
 800111c:	443b      	add	r3, r7
 800111e:	f803 2c76 	strb.w	r2, [r3, #-118]
					  if(enemy_positions_x[i] < 2){
 8001122:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001126:	33a0      	adds	r3, #160	@ 0xa0
 8001128:	443b      	add	r3, r7
 800112a:	f813 3c76 	ldrb.w	r3, [r3, #-118]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d820      	bhi.n	8001174 <main+0x6dc>
						  enemy_positions_x[i] = 2;
 8001132:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001136:	33a0      	adds	r3, #160	@ 0xa0
 8001138:	443b      	add	r3, r7
 800113a:	2202      	movs	r2, #2
 800113c:	f803 2c76 	strb.w	r2, [r3, #-118]
						  enemy_change_direction = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8001146:	e02a      	b.n	800119e <main+0x706>
 8001148:	2000a194 	.word	0x2000a194
 800114c:	2000a196 	.word	0x2000a196
 8001150:	08006ba4 	.word	0x08006ba4
 8001154:	2000a12c 	.word	0x2000a12c
 8001158:	2000a140 	.word	0x2000a140
 800115c:	08006d4c 	.word	0x08006d4c
 8001160:	08006c5c 	.word	0x08006c5c
 8001164:	08009d04 	.word	0x08009d04
 8001168:	08009e24 	.word	0x08009e24
 800116c:	08009e3c 	.word	0x08009e3c
 8001170:	08009fd4 	.word	0x08009fd4
					  }
					  else if(enemy_positions_x[i] >= 147){
 8001174:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001178:	33a0      	adds	r3, #160	@ 0xa0
 800117a:	443b      	add	r3, r7
 800117c:	f813 3c76 	ldrb.w	r3, [r3, #-118]
 8001180:	2b92      	cmp	r3, #146	@ 0x92
 8001182:	d90c      	bls.n	800119e <main+0x706>
						  enemy_positions_x[i] = 147;
 8001184:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001188:	33a0      	adds	r3, #160	@ 0xa0
 800118a:	443b      	add	r3, r7
 800118c:	2293      	movs	r2, #147	@ 0x93
 800118e:	f803 2c76 	strb.w	r2, [r3, #-118]
						  enemy_change_direction = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
						  enemy_move_down = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
					  }
					  if(enemy_types[i] == 1){
 800119e:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80011a2:	33a0      	adds	r3, #160	@ 0xa0
 80011a4:	443b      	add	r3, r7
 80011a6:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d12d      	bne.n	800120a <main+0x772>
						  if(anim_counter > 5 && anim_counter < 15)
 80011ae:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d916      	bls.n	80011e4 <main+0x74c>
 80011b6:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80011ba:	2b0e      	cmp	r3, #14
 80011bc:	d812      	bhi.n	80011e4 <main+0x74c>
							  draw_image(enemy_positions_x[i], enemy_positions_y[i], 12, 8, sprite_crab_2);
 80011be:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80011c2:	33a0      	adds	r3, #160	@ 0xa0
 80011c4:	443b      	add	r3, r7
 80011c6:	f813 0c76 	ldrb.w	r0, [r3, #-118]
 80011ca:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80011ce:	33a0      	adds	r3, #160	@ 0xa0
 80011d0:	443b      	add	r3, r7
 80011d2:	f813 1ca0 	ldrb.w	r1, [r3, #-160]
 80011d6:	4b52      	ldr	r3, [pc, #328]	@ (8001320 <main+0x888>)
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2308      	movs	r3, #8
 80011dc:	220c      	movs	r2, #12
 80011de:	f7ff fbd5 	bl	800098c <draw_image>
 80011e2:	e077      	b.n	80012d4 <main+0x83c>
						  else
							  draw_image(enemy_positions_x[i], enemy_positions_y[i], 12, 8, sprite_crab);
 80011e4:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80011e8:	33a0      	adds	r3, #160	@ 0xa0
 80011ea:	443b      	add	r3, r7
 80011ec:	f813 0c76 	ldrb.w	r0, [r3, #-118]
 80011f0:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80011f4:	33a0      	adds	r3, #160	@ 0xa0
 80011f6:	443b      	add	r3, r7
 80011f8:	f813 1ca0 	ldrb.w	r1, [r3, #-160]
 80011fc:	4b49      	ldr	r3, [pc, #292]	@ (8001324 <main+0x88c>)
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2308      	movs	r3, #8
 8001202:	220c      	movs	r2, #12
 8001204:	f7ff fbc2 	bl	800098c <draw_image>
 8001208:	e064      	b.n	80012d4 <main+0x83c>
					  }
					  else if(enemy_types[i] == 2){
 800120a:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800120e:	33a0      	adds	r3, #160	@ 0xa0
 8001210:	443b      	add	r3, r7
 8001212:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d12d      	bne.n	8001276 <main+0x7de>
						  if(anim_counter > 10 && anim_counter < 20)
 800121a:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d916      	bls.n	8001250 <main+0x7b8>
 8001222:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001226:	2b13      	cmp	r3, #19
 8001228:	d812      	bhi.n	8001250 <main+0x7b8>
							  draw_image(enemy_positions_x[i], enemy_positions_y[i], 12, 8, sprite_octopus_2);
 800122a:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800122e:	33a0      	adds	r3, #160	@ 0xa0
 8001230:	443b      	add	r3, r7
 8001232:	f813 0c76 	ldrb.w	r0, [r3, #-118]
 8001236:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800123a:	33a0      	adds	r3, #160	@ 0xa0
 800123c:	443b      	add	r3, r7
 800123e:	f813 1ca0 	ldrb.w	r1, [r3, #-160]
 8001242:	4b39      	ldr	r3, [pc, #228]	@ (8001328 <main+0x890>)
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2308      	movs	r3, #8
 8001248:	220c      	movs	r2, #12
 800124a:	f7ff fb9f 	bl	800098c <draw_image>
 800124e:	e041      	b.n	80012d4 <main+0x83c>
						  else
							  draw_image(enemy_positions_x[i], enemy_positions_y[i], 12, 8, sprite_octopus);
 8001250:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001254:	33a0      	adds	r3, #160	@ 0xa0
 8001256:	443b      	add	r3, r7
 8001258:	f813 0c76 	ldrb.w	r0, [r3, #-118]
 800125c:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001260:	33a0      	adds	r3, #160	@ 0xa0
 8001262:	443b      	add	r3, r7
 8001264:	f813 1ca0 	ldrb.w	r1, [r3, #-160]
 8001268:	4b30      	ldr	r3, [pc, #192]	@ (800132c <main+0x894>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2308      	movs	r3, #8
 800126e:	220c      	movs	r2, #12
 8001270:	f7ff fb8c 	bl	800098c <draw_image>
 8001274:	e02e      	b.n	80012d4 <main+0x83c>
					  }
					  else{
						  if(anim_counter > 20 && anim_counter < 30)
 8001276:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800127a:	2b14      	cmp	r3, #20
 800127c:	d916      	bls.n	80012ac <main+0x814>
 800127e:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8001282:	2b1d      	cmp	r3, #29
 8001284:	d812      	bhi.n	80012ac <main+0x814>
							  draw_image(enemy_positions_x[i], enemy_positions_y[i], 12, 8, sprite_squid_2);
 8001286:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800128a:	33a0      	adds	r3, #160	@ 0xa0
 800128c:	443b      	add	r3, r7
 800128e:	f813 0c76 	ldrb.w	r0, [r3, #-118]
 8001292:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001296:	33a0      	adds	r3, #160	@ 0xa0
 8001298:	443b      	add	r3, r7
 800129a:	f813 1ca0 	ldrb.w	r1, [r3, #-160]
 800129e:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <main+0x898>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2308      	movs	r3, #8
 80012a4:	220c      	movs	r2, #12
 80012a6:	f7ff fb71 	bl	800098c <draw_image>
 80012aa:	e013      	b.n	80012d4 <main+0x83c>
						  else
							  draw_image(enemy_positions_x[i], enemy_positions_y[i], 12, 8, sprite_squid);
 80012ac:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80012b0:	33a0      	adds	r3, #160	@ 0xa0
 80012b2:	443b      	add	r3, r7
 80012b4:	f813 0c76 	ldrb.w	r0, [r3, #-118]
 80012b8:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80012bc:	33a0      	adds	r3, #160	@ 0xa0
 80012be:	443b      	add	r3, r7
 80012c0:	f813 1ca0 	ldrb.w	r1, [r3, #-160]
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <main+0x89c>)
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2308      	movs	r3, #8
 80012ca:	220c      	movs	r2, #12
 80012cc:	f7ff fb5e 	bl	800098c <draw_image>
 80012d0:	e000      	b.n	80012d4 <main+0x83c>
					  continue;
 80012d2:	bf00      	nop
			  for(uint8_t i = 0; i < TOTAL_ENEMY_COUNT; i++){
 80012d4:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80012d8:	3301      	adds	r3, #1
 80012da:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 80012de:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80012e2:	2b14      	cmp	r3, #20
 80012e4:	f67f ae8d 	bls.w	8001002 <main+0x56a>
				  }
			  }


			  //draw hp
			  if(hp > 1){
 80012e8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d907      	bls.n	8001300 <main+0x868>
				  draw_image(10, 114, 12, 12, sprite_player);
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <main+0x8a0>)
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	230c      	movs	r3, #12
 80012f6:	220c      	movs	r2, #12
 80012f8:	2172      	movs	r1, #114	@ 0x72
 80012fa:	200a      	movs	r0, #10
 80012fc:	f7ff fb46 	bl	800098c <draw_image>
			  }
			  if(hp > 2){
 8001300:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8001304:	2b02      	cmp	r3, #2
 8001306:	d907      	bls.n	8001318 <main+0x880>
				  draw_image(30, 114, 12, 12, sprite_player);
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <main+0x8a0>)
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	230c      	movs	r3, #12
 800130e:	220c      	movs	r2, #12
 8001310:	2172      	movs	r1, #114	@ 0x72
 8001312:	201e      	movs	r0, #30
 8001314:	f7ff fb3a 	bl	800098c <draw_image>
			  }

	  		}
			  lcd_copy();
 8001318:	f7ff fa94 	bl	8000844 <lcd_copy>
	  	if(HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_RESET || HAL_GPIO_ReadPin(JOY_BTN_GPIO_Port, JOY_BTN_Pin) == GPIO_PIN_RESET) {
 800131c:	e48b      	b.n	8000c36 <main+0x19e>
 800131e:	bf00      	nop
 8001320:	08009f14 	.word	0x08009f14
 8001324:	08009e54 	.word	0x08009e54
 8001328:	0800a2d4 	.word	0x0800a2d4
 800132c:	0800a214 	.word	0x0800a214
 8001330:	0800a154 	.word	0x0800a154
 8001334:	0800a094 	.word	0x0800a094
 8001338:	08009d04 	.word	0x08009d04

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b096      	sub	sp, #88	@ 0x58
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2244      	movs	r2, #68	@ 0x44
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f004 ff3a 	bl	80061c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800135e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001362:	f002 f95f 	bl	8003624 <HAL_PWREx_ControlVoltageScaling>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800136c:	f000 f837 	bl	80013de <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001370:	2302      	movs	r3, #2
 8001372:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001378:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800137a:	2310      	movs	r3, #16
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137e:	2302      	movs	r3, #2
 8001380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001382:	2302      	movs	r3, #2
 8001384:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001386:	2301      	movs	r3, #1
 8001388:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800138a:	230a      	movs	r3, #10
 800138c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800138e:	2307      	movs	r3, #7
 8001390:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001392:	2302      	movs	r3, #2
 8001394:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 f996 	bl	80036d0 <HAL_RCC_OscConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013aa:	f000 f818 	bl	80013de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ae:	230f      	movs	r3, #15
 80013b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	2303      	movs	r3, #3
 80013b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	2104      	movs	r1, #4
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fd5e 	bl	8003e88 <HAL_RCC_ClockConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013d2:	f000 f804 	bl	80013de <Error_Handler>
  }
}
 80013d6:	bf00      	nop
 80013d8:	3758      	adds	r7, #88	@ 0x58
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e2:	b672      	cpsid	i
}
 80013e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e6:	bf00      	nop
 80013e8:	e7fd      	b.n	80013e6 <Error_Handler+0x8>
	...

080013ec <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <MX_SPI2_Init+0x74>)
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <MX_SPI2_Init+0x78>)
 80013f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_SPI2_Init+0x74>)
 80013f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <MX_SPI2_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_SPI2_Init+0x74>)
 8001406:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800140a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_SPI2_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <MX_SPI2_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_SPI2_Init+0x74>)
 800141a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800141e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <MX_SPI2_Init+0x74>)
 8001422:	2210      	movs	r2, #16
 8001424:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_SPI2_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_SPI2_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <MX_SPI2_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_SPI2_Init+0x74>)
 800143a:	2207      	movs	r2, #7
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <MX_SPI2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_SPI2_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_SPI2_Init+0x74>)
 800144c:	f003 fbc4 	bl	8004bd8 <HAL_SPI_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001456:	f7ff ffc2 	bl	80013de <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000a19c 	.word	0x2000a19c
 8001464:	40003800 	.word	0x40003800

08001468 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a3a      	ldr	r2, [pc, #232]	@ (8001570 <HAL_SPI_MspInit+0x108>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d16d      	bne.n	8001566 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800148a:	4b3a      	ldr	r3, [pc, #232]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	4a39      	ldr	r2, [pc, #228]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
 8001496:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a33      	ldr	r2, [pc, #204]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014be:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <HAL_SPI_MspInit+0x10c>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d2:	2308      	movs	r3, #8
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e2:	2305      	movs	r3, #5
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4822      	ldr	r0, [pc, #136]	@ (8001578 <HAL_SPI_MspInit+0x110>)
 80014ee:	f001 feb1 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001504:	2305      	movs	r3, #5
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	481b      	ldr	r0, [pc, #108]	@ (800157c <HAL_SPI_MspInit+0x114>)
 8001510:	f001 fea0 	bl	8003254 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 8001516:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <HAL_SPI_MspInit+0x11c>)
 8001518:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 800151c:	2201      	movs	r2, #1
 800151e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 8001522:	2210      	movs	r2, #16
 8001524:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001544:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800154a:	480d      	ldr	r0, [pc, #52]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 800154c:	f001 fc8a 	bl	8002e64 <HAL_DMA_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001556:	f7ff ff42 	bl	80013de <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 800155e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_SPI_MspInit+0x118>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	@ 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40003800 	.word	0x40003800
 8001574:	40021000 	.word	0x40021000
 8001578:	48000800 	.word	0x48000800
 800157c:	48000400 	.word	0x48000400
 8001580:	2000a200 	.word	0x2000a200
 8001584:	40020058 	.word	0x40020058

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_MspInit+0x44>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	4a0e      	ldr	r2, [pc, #56]	@ (80015cc <HAL_MspInit+0x44>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6613      	str	r3, [r2, #96]	@ 0x60
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_MspInit+0x44>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_MspInit+0x44>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <NMI_Handler+0x4>

080015d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001626:	f000 f8e5 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <DMA1_Channel1_IRQHandler+0x10>)
 8001636:	f001 fd2d 	bl	8003094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000e4 	.word	0x200000e4

08001644 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <DMA1_Channel5_IRQHandler+0x10>)
 800164a:	f001 fd23 	bl	8003094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000a200 	.word	0x2000a200

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f004 fda4 	bl	80061d4 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20018000 	.word	0x20018000
 80016b8:	00002000 	.word	0x00002000
 80016bc:	2000a248 	.word	0x2000a248
 80016c0:	2000a398 	.word	0x2000a398

080016c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001720 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016ec:	f7ff ffea 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <LoopForever+0x6>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	@ (8001728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LoopForever+0xe>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	@ (8001734 <LoopForever+0x16>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001716:	f004 fd63 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171a:	f7ff f9bd 	bl	8000a98 <main>

0800171e <LoopForever>:

LoopForever:
    b LoopForever
 800171e:	e7fe      	b.n	800171e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001720:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800172c:	0800a418 	.word	0x0800a418
  ldr r2, =_sbss
 8001730:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001734:	2000a398 	.word	0x2000a398

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_Init+0x3c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a0b      	ldr	r2, [pc, #44]	@ (8001778 <HAL_Init+0x3c>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001750:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001752:	2003      	movs	r0, #3
 8001754:	f001 fb44 	bl	8002de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001758:	2000      	movs	r0, #0
 800175a:	f000 f80f 	bl	800177c <HAL_InitTick>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	e001      	b.n	800176e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800176a:	f7ff ff0d 	bl	8001588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176e:	79fb      	ldrb	r3, [r7, #7]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_InitTick+0x6c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_InitTick+0x70>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_InitTick+0x6c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fb4f 	bl	8002e4a <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d809      	bhi.n	80017cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f001 fb19 	bl	8002df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_InitTick+0x74>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e007      	b.n	80017dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
 80017d0:	e004      	b.n	80017dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e001      	b.n	80017dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	@ (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008
 8001818:	2000a24c 	.word	0x2000a24c

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2000a24c 	.word	0x2000a24c

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008

0800187c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3360      	adds	r3, #96	@ 0x60
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <LL_ADC_SetOffset+0x44>)
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	4313      	orrs	r3, r2
 8001914:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800191c:	bf00      	nop
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	03fff000 	.word	0x03fff000

0800192c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3360      	adds	r3, #96	@ 0x60
 800193a:	461a      	mov	r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3360      	adds	r3, #96	@ 0x60
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	431a      	orrs	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3330      	adds	r3, #48	@ 0x30
 80019c4:	461a      	mov	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	4413      	add	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	211f      	movs	r1, #31
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	0e9b      	lsrs	r3, r3, #26
 80019ec:	f003 011f 	and.w	r1, r3, #31
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	431a      	orrs	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3314      	adds	r3, #20
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0e5b      	lsrs	r3, r3, #25
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	0d1b      	lsrs	r3, r3, #20
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	2107      	movs	r1, #7
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	401a      	ands	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	0d1b      	lsrs	r3, r3, #20
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0318 	and.w	r3, r3, #24
 8001a86:	4908      	ldr	r1, [pc, #32]	@ (8001aa8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a88:	40d9      	lsrs	r1, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	431a      	orrs	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	0007ffff 	.word	0x0007ffff

08001aac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ad8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6093      	str	r3, [r2, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b00:	d101      	bne.n	8001b06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <LL_ADC_IsEnabled+0x18>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <LL_ADC_IsEnabled+0x1a>
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bc2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bc6:	f043 0204 	orr.w	r2, r3, #4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d101      	bne.n	8001c18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e130      	b.n	8001ea4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7fe fb95 	bl	8000380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff3f 	bl	8001aec <LL_ADC_IsDeepPowerDownEnabled>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff25 	bl	8001ac8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff5a 	bl	8001b3c <LL_ADC_IsInternalRegulatorEnabled>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff3e 	bl	8001b14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c98:	4b84      	ldr	r3, [pc, #528]	@ (8001eac <HAL_ADC_Init+0x284>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	4a84      	ldr	r2, [pc, #528]	@ (8001eb0 <HAL_ADC_Init+0x288>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cac:	e002      	b.n	8001cb4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff3c 	bl	8001b3c <LL_ADC_IsInternalRegulatorEnabled>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff75 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001cf0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 80c9 	bne.w	8001e92 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 80c5 	bne.w	8001e92 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d10:	f043 0202 	orr.w	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff35 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d115      	bne.n	8001d54 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d28:	4862      	ldr	r0, [pc, #392]	@ (8001eb4 <HAL_ADC_Init+0x28c>)
 8001d2a:	f7ff ff2f 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d2e:	4604      	mov	r4, r0
 8001d30:	4861      	ldr	r0, [pc, #388]	@ (8001eb8 <HAL_ADC_Init+0x290>)
 8001d32:	f7ff ff2b 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d36:	4603      	mov	r3, r0
 8001d38:	431c      	orrs	r4, r3
 8001d3a:	4860      	ldr	r0, [pc, #384]	@ (8001ebc <HAL_ADC_Init+0x294>)
 8001d3c:	f7ff ff26 	bl	8001b8c <LL_ADC_IsEnabled>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4323      	orrs	r3, r4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	485c      	ldr	r0, [pc, #368]	@ (8001ec0 <HAL_ADC_Init+0x298>)
 8001d50:	f7ff fd94 	bl	800187c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e5b      	ldrb	r3, [r3, #25]
 8001d58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d106      	bne.n	8001d90 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	3b01      	subs	r3, #1
 8001d88:	045b      	lsls	r3, r3, #17
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4b44      	ldr	r3, [pc, #272]	@ (8001ec4 <HAL_ADC_Init+0x29c>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff1b 	bl	8001c00 <LL_ADC_INJ_IsConversionOngoing>
 8001dca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d13d      	bne.n	8001e4e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d13a      	bne.n	8001e4e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ddc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001de4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001df4:	f023 0302 	bic.w	r3, r3, #2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	69b9      	ldr	r1, [r7, #24]
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d118      	bne.n	8001e3e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e16:	f023 0304 	bic.w	r3, r3, #4
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e28:	4311      	orrs	r1, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	e007      	b.n	8001e4e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10c      	bne.n	8001e70 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	f023 010f 	bic.w	r1, r3, #15
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e6e:	e007      	b.n	8001e80 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 020f 	bic.w	r2, r2, #15
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e84:	f023 0303 	bic.w	r3, r3, #3
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e90:	e007      	b.n	8001ea2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e96:	f043 0210 	orr.w	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3724      	adds	r7, #36	@ 0x24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd90      	pop	{r4, r7, pc}
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	053e2d63 	.word	0x053e2d63
 8001eb4:	50040000 	.word	0x50040000
 8001eb8:	50040100 	.word	0x50040100
 8001ebc:	50040200 	.word	0x50040200
 8001ec0:	50040300 	.word	0x50040300
 8001ec4:	fff0c007 	.word	0xfff0c007

08001ec8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed4:	4853      	ldr	r0, [pc, #332]	@ (8002024 <HAL_ADC_Start_DMA+0x15c>)
 8001ed6:	f7ff fde9 	bl	8001aac <LL_ADC_GetMultimode>
 8001eda:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe7a 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 8093 	bne.w	8002014 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_Start_DMA+0x34>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e08e      	b.n	800201a <HAL_ADC_Start_DMA+0x152>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a47      	ldr	r2, [pc, #284]	@ (8002028 <HAL_ADC_Start_DMA+0x160>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d008      	beq.n	8001f20 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b05      	cmp	r3, #5
 8001f18:	d002      	beq.n	8001f20 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d172      	bne.n	8002006 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fc9d 	bl	8002860 <ADC_Enable>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d165      	bne.n	8001ffc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a38      	ldr	r2, [pc, #224]	@ (800202c <HAL_ADC_Start_DMA+0x164>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d002      	beq.n	8001f54 <HAL_ADC_Start_DMA+0x8c>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e000      	b.n	8001f56 <HAL_ADC_Start_DMA+0x8e>
 8001f54:	4b36      	ldr	r3, [pc, #216]	@ (8002030 <HAL_ADC_Start_DMA+0x168>)
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d002      	beq.n	8001f64 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	f023 0206 	bic.w	r2, r3, #6
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f94:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <HAL_ADC_Start_DMA+0x16c>)
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	4a26      	ldr	r2, [pc, #152]	@ (8002038 <HAL_ADC_Start_DMA+0x170>)
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa4:	4a25      	ldr	r2, [pc, #148]	@ (800203c <HAL_ADC_Start_DMA+0x174>)
 8001fa6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	221c      	movs	r2, #28
 8001fae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0210 	orr.w	r2, r2, #16
 8001fc6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3340      	adds	r3, #64	@ 0x40
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f000 fff4 	bl	8002fd4 <HAL_DMA_Start_IT>
 8001fec:	4603      	mov	r3, r0
 8001fee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fddc 	bl	8001bb2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ffa:	e00d      	b.n	8002018 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002004:	e008      	b.n	8002018 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002012:	e001      	b.n	8002018 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002014:	2302      	movs	r3, #2
 8002016:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002018:	7dfb      	ldrb	r3, [r7, #23]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	50040300 	.word	0x50040300
 8002028:	50040200 	.word	0x50040200
 800202c:	50040100 	.word	0x50040100
 8002030:	50040000 	.word	0x50040000
 8002034:	0800296d 	.word	0x0800296d
 8002038:	08002a45 	.word	0x08002a45
 800203c:	08002a61 	.word	0x08002a61

08002040 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b0b6      	sub	sp, #216	@ 0xd8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x22>
 800209a:	2302      	movs	r3, #2
 800209c:	e3c9      	b.n	8002832 <HAL_ADC_ConfigChannel+0x7b6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fd95 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 83aa 	bne.w	800280c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d824      	bhi.n	8002112 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	3b02      	subs	r3, #2
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d81b      	bhi.n	800210a <HAL_ADC_ConfigChannel+0x8e>
 80020d2:	a201      	add	r2, pc, #4	@ (adr r2, 80020d8 <HAL_ADC_ConfigChannel+0x5c>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	080020f1 	.word	0x080020f1
 80020e0:	080020f9 	.word	0x080020f9
 80020e4:	08002101 	.word	0x08002101
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020e8:	230c      	movs	r3, #12
 80020ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020ee:	e010      	b.n	8002112 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020f0:	2312      	movs	r3, #18
 80020f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020f6:	e00c      	b.n	8002112 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80020f8:	2318      	movs	r3, #24
 80020fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020fe:	e008      	b.n	8002112 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002100:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002108:	e003      	b.n	8002112 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800210a:	2306      	movs	r3, #6
 800210c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002110:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002120:	f7ff fc48 	bl	80019b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fd56 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 800212e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd62 	bl	8001c00 <LL_ADC_INJ_IsConversionOngoing>
 800213c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 81a4 	bne.w	8002492 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800214a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 819f 	bne.w	8002492 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6819      	ldr	r1, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	461a      	mov	r2, r3
 8002162:	f7ff fc53 	bl	8001a0c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d00a      	beq.n	800219e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6919      	ldr	r1, [r3, #16]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002198:	f7ff fba4 	bl	80018e4 <LL_ADC_SetOffset>
 800219c:	e179      	b.n	8002492 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fbc1 	bl	800192c <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x14e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fbb6 	bl	800192c <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	e01e      	b.n	8002208 <HAL_ADC_ConfigChannel+0x18c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fbab 	bl	800192c <LL_ADC_GetOffsetChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80021f8:	2320      	movs	r3, #32
 80021fa:	e004      	b.n	8002206 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80021fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1a4>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	e018      	b.n	8002252 <HAL_ADC_ConfigChannel+0x1d6>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800223c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e004      	b.n	8002252 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002252:	429a      	cmp	r2, r3
 8002254:	d106      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fb7a 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fb5e 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10a      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x214>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2101      	movs	r1, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fb53 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 021f 	and.w	r2, r3, #31
 800228e:	e01e      	b.n	80022ce <HAL_ADC_ConfigChannel+0x252>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fb48 	bl	800192c <LL_ADC_GetOffsetChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e004      	b.n	80022cc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80022c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x26a>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0e9b      	lsrs	r3, r3, #26
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	e018      	b.n	8002318 <HAL_ADC_ConfigChannel+0x29c>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80022fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002302:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800230a:	2320      	movs	r3, #32
 800230c:	e004      	b.n	8002318 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800230e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2200      	movs	r2, #0
 8002322:	2101      	movs	r1, #1
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fb17 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2102      	movs	r1, #2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fafb 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x2da>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff faf0 	bl	800192c <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	e01e      	b.n	8002394 <HAL_ADC_ConfigChannel+0x318>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2102      	movs	r1, #2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fae5 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002368:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800237c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e004      	b.n	8002392 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002388:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x330>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	e014      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x35a>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80023ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80023c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80023c8:	2320      	movs	r3, #32
 80023ca:	e004      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80023cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d106      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	2102      	movs	r1, #2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fab8 	bl	8001958 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2103      	movs	r1, #3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fa9c 	bl	800192c <LL_ADC_GetOffsetChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x398>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2103      	movs	r1, #3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fa91 	bl	800192c <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	f003 021f 	and.w	r2, r3, #31
 8002412:	e017      	b.n	8002444 <HAL_ADC_ConfigChannel+0x3c8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2103      	movs	r1, #3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fa86 	bl	800192c <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800242c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800242e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e003      	b.n	8002442 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800243a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_ADC_ConfigChannel+0x3e0>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	e011      	b.n	8002480 <HAL_ADC_ConfigChannel+0x404>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800246a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800246c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800246e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002474:	2320      	movs	r3, #32
 8002476:	e003      	b.n	8002480 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002480:	429a      	cmp	r2, r3
 8002482:	d106      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2200      	movs	r2, #0
 800248a:	2103      	movs	r1, #3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fa63 	bl	8001958 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fb78 	bl	8001b8c <LL_ADC_IsEnabled>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 8140 	bne.w	8002724 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	461a      	mov	r2, r3
 80024b2:	f7ff fad7 	bl	8001a64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4a8f      	ldr	r2, [pc, #572]	@ (80026f8 <HAL_ADC_ConfigChannel+0x67c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	f040 8131 	bne.w	8002724 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10b      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x46e>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0e9b      	lsrs	r3, r3, #26
 80024d8:	3301      	adds	r3, #1
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2b09      	cmp	r3, #9
 80024e0:	bf94      	ite	ls
 80024e2:	2301      	movls	r3, #1
 80024e4:	2300      	movhi	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	e019      	b.n	800251e <HAL_ADC_ConfigChannel+0x4a2>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80024fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002502:	2320      	movs	r3, #32
 8002504:	e003      	b.n	800250e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	3301      	adds	r3, #1
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2b09      	cmp	r3, #9
 8002516:	bf94      	ite	ls
 8002518:	2301      	movls	r3, #1
 800251a:	2300      	movhi	r3, #0
 800251c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251e:	2b00      	cmp	r3, #0
 8002520:	d079      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_ADC_ConfigChannel+0x4c2>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0e9b      	lsrs	r3, r3, #26
 8002534:	3301      	adds	r3, #1
 8002536:	069b      	lsls	r3, r3, #26
 8002538:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800253c:	e015      	b.n	800256a <HAL_ADC_ConfigChannel+0x4ee>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800254c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800254e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e003      	b.n	8002562 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800255a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	069b      	lsls	r3, r3, #26
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_ADC_ConfigChannel+0x50e>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	0e9b      	lsrs	r3, r3, #26
 800257c:	3301      	adds	r3, #1
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	e017      	b.n	80025ba <HAL_ADC_ConfigChannel+0x53e>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800259c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80025a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	ea42 0103 	orr.w	r1, r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x564>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0e9b      	lsrs	r3, r3, #26
 80025d0:	3301      	adds	r3, #1
 80025d2:	f003 021f 	and.w	r2, r3, #31
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	051b      	lsls	r3, r3, #20
 80025de:	e018      	b.n	8002612 <HAL_ADC_ConfigChannel+0x596>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80025fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	f003 021f 	and.w	r2, r3, #31
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002612:	430b      	orrs	r3, r1
 8002614:	e081      	b.n	800271a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261e:	2b00      	cmp	r3, #0
 8002620:	d107      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x5b6>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0e9b      	lsrs	r3, r3, #26
 8002628:	3301      	adds	r3, #1
 800262a:	069b      	lsls	r3, r3, #26
 800262c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002630:	e015      	b.n	800265e <HAL_ADC_ConfigChannel+0x5e2>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e003      	b.n	8002656 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800264e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3301      	adds	r3, #1
 8002658:	069b      	lsls	r3, r3, #26
 800265a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_ADC_ConfigChannel+0x602>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	3301      	adds	r3, #1
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	e017      	b.n	80026ae <HAL_ADC_ConfigChannel+0x632>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	61bb      	str	r3, [r7, #24]
  return result;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e003      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	ea42 0103 	orr.w	r1, r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <HAL_ADC_ConfigChannel+0x65e>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 021f 	and.w	r2, r3, #31
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	3b1e      	subs	r3, #30
 80026d2:	051b      	lsls	r3, r3, #20
 80026d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	e01e      	b.n	8002718 <HAL_ADC_ConfigChannel+0x69c>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	60fb      	str	r3, [r7, #12]
  return result;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e006      	b.n	8002704 <HAL_ADC_ConfigChannel+0x688>
 80026f6:	bf00      	nop
 80026f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f003 021f 	and.w	r2, r3, #31
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	3b1e      	subs	r3, #30
 8002712:	051b      	lsls	r3, r3, #20
 8002714:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002718:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271e:	4619      	mov	r1, r3
 8002720:	f7ff f974 	bl	8001a0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b44      	ldr	r3, [pc, #272]	@ (800283c <HAL_ADC_ConfigChannel+0x7c0>)
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d07a      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002730:	4843      	ldr	r0, [pc, #268]	@ (8002840 <HAL_ADC_ConfigChannel+0x7c4>)
 8002732:	f7ff f8c9 	bl	80018c8 <LL_ADC_GetCommonPathInternalCh>
 8002736:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a41      	ldr	r2, [pc, #260]	@ (8002844 <HAL_ADC_ConfigChannel+0x7c8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d12c      	bne.n	800279e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d126      	bne.n	800279e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3c      	ldr	r2, [pc, #240]	@ (8002848 <HAL_ADC_ConfigChannel+0x7cc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x6e8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a3b      	ldr	r2, [pc, #236]	@ (800284c <HAL_ADC_ConfigChannel+0x7d0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d15d      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002764:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002768:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800276c:	4619      	mov	r1, r3
 800276e:	4834      	ldr	r0, [pc, #208]	@ (8002840 <HAL_ADC_ConfigChannel+0x7c4>)
 8002770:	f7ff f897 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002774:	4b36      	ldr	r3, [pc, #216]	@ (8002850 <HAL_ADC_ConfigChannel+0x7d4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	4a36      	ldr	r2, [pc, #216]	@ (8002854 <HAL_ADC_ConfigChannel+0x7d8>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800278e:	e002      	b.n	8002796 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	3b01      	subs	r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f9      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800279c:	e040      	b.n	8002820 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002858 <HAL_ADC_ConfigChannel+0x7dc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d118      	bne.n	80027da <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d112      	bne.n	80027da <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a23      	ldr	r2, [pc, #140]	@ (8002848 <HAL_ADC_ConfigChannel+0x7cc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_ADC_ConfigChannel+0x74c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a22      	ldr	r2, [pc, #136]	@ (800284c <HAL_ADC_ConfigChannel+0x7d0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d12d      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d0:	4619      	mov	r1, r3
 80027d2:	481b      	ldr	r0, [pc, #108]	@ (8002840 <HAL_ADC_ConfigChannel+0x7c4>)
 80027d4:	f7ff f865 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027d8:	e024      	b.n	8002824 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1f      	ldr	r2, [pc, #124]	@ (800285c <HAL_ADC_ConfigChannel+0x7e0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d120      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11a      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a14      	ldr	r2, [pc, #80]	@ (8002848 <HAL_ADC_ConfigChannel+0x7cc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d115      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002802:	4619      	mov	r1, r3
 8002804:	480e      	ldr	r0, [pc, #56]	@ (8002840 <HAL_ADC_ConfigChannel+0x7c4>)
 8002806:	f7ff f84c 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
 800280a:	e00c      	b.n	8002826 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800281e:	e002      	b.n	8002826 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002820:	bf00      	nop
 8002822:	e000      	b.n	8002826 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002824:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800282e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002832:	4618      	mov	r0, r3
 8002834:	37d8      	adds	r7, #216	@ 0xd8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	80080000 	.word	0x80080000
 8002840:	50040300 	.word	0x50040300
 8002844:	c7520000 	.word	0xc7520000
 8002848:	50040000 	.word	0x50040000
 800284c:	50040200 	.word	0x50040200
 8002850:	20000000 	.word	0x20000000
 8002854:	053e2d63 	.word	0x053e2d63
 8002858:	cb840000 	.word	0xcb840000
 800285c:	80000001 	.word	0x80000001

08002860 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff f98b 	bl	8001b8c <LL_ADC_IsEnabled>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d169      	bne.n	8002950 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	4b36      	ldr	r3, [pc, #216]	@ (800295c <ADC_Enable+0xfc>)
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	f043 0210 	orr.w	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e055      	b.n	8002952 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff f95a 	bl	8001b64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028b0:	482b      	ldr	r0, [pc, #172]	@ (8002960 <ADC_Enable+0x100>)
 80028b2:	f7ff f809 	bl	80018c8 <LL_ADC_GetCommonPathInternalCh>
 80028b6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c0:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <ADC_Enable+0x104>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <ADC_Enable+0x108>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028da:	e002      	b.n	80028e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	3b01      	subs	r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f9      	bne.n	80028dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028e8:	f7fe ff98 	bl	800181c <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ee:	e028      	b.n	8002942 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff f949 	bl	8001b8c <LL_ADC_IsEnabled>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f92d 	bl	8001b64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800290a:	f7fe ff87 	bl	800181c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d914      	bls.n	8002942 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d00d      	beq.n	8002942 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e007      	b.n	8002952 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d1cf      	bne.n	80028f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	8000003f 	.word	0x8000003f
 8002960:	50040300 	.word	0x50040300
 8002964:	20000000 	.word	0x20000000
 8002968:	053e2d63 	.word	0x053e2d63

0800296c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d14b      	bne.n	8002a1e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d021      	beq.n	80029e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fff2 	bl	800198e <LL_ADC_REG_IsTriggerSourceSWStart>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d032      	beq.n	8002a16 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d12b      	bne.n	8002a16 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11f      	bne.n	8002a16 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80029e2:	e018      	b.n	8002a16 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d111      	bne.n	8002a16 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff fb12 	bl	8002040 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a1c:	e00e      	b.n	8002a3c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff fb1c 	bl	8002068 <HAL_ADC_ErrorCallback>
}
 8002a30:	e004      	b.n	8002a3c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f7ff fafe 	bl	8002054 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	f043 0204 	orr.w	r2, r3, #4
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff faee 	bl	8002068 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <LL_ADC_IsEnabled>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_IsEnabled+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_IsEnabled+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_REG_IsConversionOngoing>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b09f      	sub	sp, #124	@ 0x7c
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e093      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b06:	2300      	movs	r3, #0
 8002b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a47      	ldr	r2, [pc, #284]	@ (8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d102      	bne.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b18:	4b46      	ldr	r3, [pc, #280]	@ (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	e001      	b.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e072      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ffb9 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002b48:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ffb3 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d154      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d151      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b60:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002b62:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d02c      	beq.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b7e:	035b      	lsls	r3, r3, #13
 8002b80:	430b      	orrs	r3, r1
 8002b82:	431a      	orrs	r2, r3
 8002b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b88:	4829      	ldr	r0, [pc, #164]	@ (8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b8a:	f7ff ff83 	bl	8002a94 <LL_ADC_IsEnabled>
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4828      	ldr	r0, [pc, #160]	@ (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b92:	f7ff ff7f 	bl	8002a94 <LL_ADC_IsEnabled>
 8002b96:	4603      	mov	r3, r0
 8002b98:	431c      	orrs	r4, r3
 8002b9a:	4828      	ldr	r0, [pc, #160]	@ (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b9c:	f7ff ff7a 	bl	8002a94 <LL_ADC_IsEnabled>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4323      	orrs	r3, r4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d137      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bb0:	f023 030f 	bic.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	6811      	ldr	r1, [r2, #0]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	6892      	ldr	r2, [r2, #8]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bc2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bc4:	e028      	b.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bd0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bd2:	4817      	ldr	r0, [pc, #92]	@ (8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bd4:	f7ff ff5e 	bl	8002a94 <LL_ADC_IsEnabled>
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4816      	ldr	r0, [pc, #88]	@ (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bdc:	f7ff ff5a 	bl	8002a94 <LL_ADC_IsEnabled>
 8002be0:	4603      	mov	r3, r0
 8002be2:	431c      	orrs	r4, r3
 8002be4:	4815      	ldr	r0, [pc, #84]	@ (8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002be6:	f7ff ff55 	bl	8002a94 <LL_ADC_IsEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4323      	orrs	r3, r4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d112      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bfa:	f023 030f 	bic.w	r3, r3, #15
 8002bfe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c02:	e009      	b.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c16:	e000      	b.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c22:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	377c      	adds	r7, #124	@ 0x7c
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	50040000 	.word	0x50040000
 8002c34:	50040100 	.word	0x50040100
 8002c38:	50040300 	.word	0x50040300
 8002c3c:	50040200 	.word	0x50040200

08002c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c72:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	f003 0307 	and.w	r3, r3, #7
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db0b      	blt.n	8002cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4907      	ldr	r1, [pc, #28]	@ (8002cdc <__NVIC_EnableIRQ+0x38>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e100 	.word	0xe000e100

08002ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	db0a      	blt.n	8002d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	490c      	ldr	r1, [pc, #48]	@ (8002d2c <__NVIC_SetPriority+0x4c>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	440b      	add	r3, r1
 8002d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d08:	e00a      	b.n	8002d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4908      	ldr	r1, [pc, #32]	@ (8002d30 <__NVIC_SetPriority+0x50>)
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3b04      	subs	r3, #4
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	761a      	strb	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e100 	.word	0xe000e100
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	@ 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f1c3 0307 	rsb	r3, r3, #7
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf28      	it	cs
 8002d52:	2304      	movcs	r3, #4
 8002d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d902      	bls.n	8002d64 <NVIC_EncodePriority+0x30>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3b03      	subs	r3, #3
 8002d62:	e000      	b.n	8002d66 <NVIC_EncodePriority+0x32>
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	43d9      	mvns	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	4313      	orrs	r3, r2
         );
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	@ 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dac:	d301      	bcc.n	8002db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00f      	b.n	8002dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <SysTick_Config+0x40>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dba:	210f      	movs	r1, #15
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f7ff ff8e 	bl	8002ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc4:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <SysTick_Config+0x40>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dca:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <SysTick_Config+0x40>)
 8002dcc:	2207      	movs	r2, #7
 8002dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000e010 	.word	0xe000e010

08002de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff29 	bl	8002c40 <__NVIC_SetPriorityGrouping>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e08:	f7ff ff3e 	bl	8002c88 <__NVIC_GetPriorityGrouping>
 8002e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff ff8e 	bl	8002d34 <NVIC_EncodePriority>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff5d 	bl	8002ce0 <__NVIC_SetPriority>
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff31 	bl	8002ca4 <__NVIC_EnableIRQ>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff ffa2 	bl	8002d9c <SysTick_Config>
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e098      	b.n	8002fa8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb4 <HAL_DMA_Init+0x150>)
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d80f      	bhi.n	8002ea2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb8 <HAL_DMA_Init+0x154>)
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002fbc <HAL_DMA_Init+0x158>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	009a      	lsls	r2, r3, #2
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a48      	ldr	r2, [pc, #288]	@ (8002fc0 <HAL_DMA_Init+0x15c>)
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ea0:	e00e      	b.n	8002ec0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b46      	ldr	r3, [pc, #280]	@ (8002fc4 <HAL_DMA_Init+0x160>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a43      	ldr	r2, [pc, #268]	@ (8002fbc <HAL_DMA_Init+0x158>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	009a      	lsls	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a42      	ldr	r2, [pc, #264]	@ (8002fc8 <HAL_DMA_Init+0x164>)
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f1a:	d039      	beq.n	8002f90 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	4a27      	ldr	r2, [pc, #156]	@ (8002fc0 <HAL_DMA_Init+0x15c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d11a      	bne.n	8002f5c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f26:	4b29      	ldr	r3, [pc, #164]	@ (8002fcc <HAL_DMA_Init+0x168>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f003 031c 	and.w	r3, r3, #28
 8002f32:	210f      	movs	r1, #15
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	4924      	ldr	r1, [pc, #144]	@ (8002fcc <HAL_DMA_Init+0x168>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f40:	4b22      	ldr	r3, [pc, #136]	@ (8002fcc <HAL_DMA_Init+0x168>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4c:	f003 031c 	and.w	r3, r3, #28
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	491d      	ldr	r1, [pc, #116]	@ (8002fcc <HAL_DMA_Init+0x168>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
 8002f5a:	e019      	b.n	8002f90 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd0 <HAL_DMA_Init+0x16c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f64:	f003 031c 	and.w	r3, r3, #28
 8002f68:	210f      	movs	r1, #15
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	4917      	ldr	r1, [pc, #92]	@ (8002fd0 <HAL_DMA_Init+0x16c>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f76:	4b16      	ldr	r3, [pc, #88]	@ (8002fd0 <HAL_DMA_Init+0x16c>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f003 031c 	and.w	r3, r3, #28
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	4911      	ldr	r1, [pc, #68]	@ (8002fd0 <HAL_DMA_Init+0x16c>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40020407 	.word	0x40020407
 8002fb8:	bffdfff8 	.word	0xbffdfff8
 8002fbc:	cccccccd 	.word	0xcccccccd
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	bffdfbf8 	.word	0xbffdfbf8
 8002fc8:	40020400 	.word	0x40020400
 8002fcc:	400200a8 	.word	0x400200a8
 8002fd0:	400204a8 	.word	0x400204a8

08002fd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_DMA_Start_IT+0x20>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e04b      	b.n	800308c <HAL_DMA_Start_IT+0xb8>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d13a      	bne.n	800307e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f8e0 	bl	80031f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 020e 	orr.w	r2, r2, #14
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e00f      	b.n	800306c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0204 	bic.w	r2, r2, #4
 800305a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 020a 	orr.w	r2, r2, #10
 800306a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e005      	b.n	800308a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003086:	2302      	movs	r3, #2
 8003088:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	f003 031c 	and.w	r3, r3, #28
 80030b4:	2204      	movs	r2, #4
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d026      	beq.n	800310e <HAL_DMA_IRQHandler+0x7a>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d021      	beq.n	800310e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0204 	bic.w	r2, r2, #4
 80030e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ec:	f003 021c 	and.w	r2, r3, #28
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	2104      	movs	r1, #4
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003100:	2b00      	cmp	r3, #0
 8003102:	d071      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800310c:	e06c      	b.n	80031e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f003 031c 	and.w	r3, r3, #28
 8003116:	2202      	movs	r2, #2
 8003118:	409a      	lsls	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02e      	beq.n	8003180 <HAL_DMA_IRQHandler+0xec>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d029      	beq.n	8003180 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 020a 	bic.w	r2, r2, #10
 8003148:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f003 021c 	and.w	r2, r3, #28
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	2102      	movs	r1, #2
 8003160:	fa01 f202 	lsl.w	r2, r1, r2
 8003164:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d038      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800317e:	e033      	b.n	80031e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	f003 031c 	and.w	r3, r3, #28
 8003188:	2208      	movs	r2, #8
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d02a      	beq.n	80031ea <HAL_DMA_IRQHandler+0x156>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d025      	beq.n	80031ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 020e 	bic.w	r2, r2, #14
 80031ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	f003 021c 	and.w	r2, r3, #28
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
}
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003204:	f003 021c 	and.w	r2, r3, #28
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f202 	lsl.w	r2, r1, r2
 8003212:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b10      	cmp	r3, #16
 8003222:	d108      	bne.n	8003236 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003234:	e007      	b.n	8003246 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	60da      	str	r2, [r3, #12]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003262:	e17f      	b.n	8003564 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8171 	beq.w	800355e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d005      	beq.n	8003294 <HAL_GPIO_Init+0x40>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d130      	bne.n	80032f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ca:	2201      	movs	r2, #1
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 0201 	and.w	r2, r3, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d118      	bne.n	8003334 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003308:	2201      	movs	r2, #1
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f003 0201 	and.w	r2, r3, #1
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	2b03      	cmp	r3, #3
 800333e:	d017      	beq.n	8003370 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d123      	bne.n	80033c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	08da      	lsrs	r2, r3, #3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3208      	adds	r2, #8
 8003384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	220f      	movs	r2, #15
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	08da      	lsrs	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3208      	adds	r2, #8
 80033be:	6939      	ldr	r1, [r7, #16]
 80033c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0203 	and.w	r2, r3, #3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80ac 	beq.w	800355e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003406:	4b5f      	ldr	r3, [pc, #380]	@ (8003584 <HAL_GPIO_Init+0x330>)
 8003408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340a:	4a5e      	ldr	r2, [pc, #376]	@ (8003584 <HAL_GPIO_Init+0x330>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6613      	str	r3, [r2, #96]	@ 0x60
 8003412:	4b5c      	ldr	r3, [pc, #368]	@ (8003584 <HAL_GPIO_Init+0x330>)
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800341e:	4a5a      	ldr	r2, [pc, #360]	@ (8003588 <HAL_GPIO_Init+0x334>)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	3302      	adds	r3, #2
 8003426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	220f      	movs	r2, #15
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003448:	d025      	beq.n	8003496 <HAL_GPIO_Init+0x242>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4f      	ldr	r2, [pc, #316]	@ (800358c <HAL_GPIO_Init+0x338>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01f      	beq.n	8003492 <HAL_GPIO_Init+0x23e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4e      	ldr	r2, [pc, #312]	@ (8003590 <HAL_GPIO_Init+0x33c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d019      	beq.n	800348e <HAL_GPIO_Init+0x23a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a4d      	ldr	r2, [pc, #308]	@ (8003594 <HAL_GPIO_Init+0x340>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_GPIO_Init+0x236>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4c      	ldr	r2, [pc, #304]	@ (8003598 <HAL_GPIO_Init+0x344>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00d      	beq.n	8003486 <HAL_GPIO_Init+0x232>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4b      	ldr	r2, [pc, #300]	@ (800359c <HAL_GPIO_Init+0x348>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <HAL_GPIO_Init+0x22e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4a      	ldr	r2, [pc, #296]	@ (80035a0 <HAL_GPIO_Init+0x34c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_GPIO_Init+0x22a>
 800347a:	2306      	movs	r3, #6
 800347c:	e00c      	b.n	8003498 <HAL_GPIO_Init+0x244>
 800347e:	2307      	movs	r3, #7
 8003480:	e00a      	b.n	8003498 <HAL_GPIO_Init+0x244>
 8003482:	2305      	movs	r3, #5
 8003484:	e008      	b.n	8003498 <HAL_GPIO_Init+0x244>
 8003486:	2304      	movs	r3, #4
 8003488:	e006      	b.n	8003498 <HAL_GPIO_Init+0x244>
 800348a:	2303      	movs	r3, #3
 800348c:	e004      	b.n	8003498 <HAL_GPIO_Init+0x244>
 800348e:	2302      	movs	r3, #2
 8003490:	e002      	b.n	8003498 <HAL_GPIO_Init+0x244>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_GPIO_Init+0x244>
 8003496:	2300      	movs	r3, #0
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	f002 0203 	and.w	r2, r2, #3
 800349e:	0092      	lsls	r2, r2, #2
 80034a0:	4093      	lsls	r3, r2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034a8:	4937      	ldr	r1, [pc, #220]	@ (8003588 <HAL_GPIO_Init+0x334>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3302      	adds	r3, #2
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034b6:	4b3b      	ldr	r3, [pc, #236]	@ (80035a4 <HAL_GPIO_Init+0x350>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034da:	4a32      	ldr	r2, [pc, #200]	@ (80035a4 <HAL_GPIO_Init+0x350>)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034e0:	4b30      	ldr	r3, [pc, #192]	@ (80035a4 <HAL_GPIO_Init+0x350>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003504:	4a27      	ldr	r2, [pc, #156]	@ (80035a4 <HAL_GPIO_Init+0x350>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800350a:	4b26      	ldr	r3, [pc, #152]	@ (80035a4 <HAL_GPIO_Init+0x350>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800352e:	4a1d      	ldr	r2, [pc, #116]	@ (80035a4 <HAL_GPIO_Init+0x350>)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003534:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <HAL_GPIO_Init+0x350>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003558:	4a12      	ldr	r2, [pc, #72]	@ (80035a4 <HAL_GPIO_Init+0x350>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3301      	adds	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	f47f ae78 	bne.w	8003264 <HAL_GPIO_Init+0x10>
  }
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	40010000 	.word	0x40010000
 800358c:	48000400 	.word	0x48000400
 8003590:	48000800 	.word	0x48000800
 8003594:	48000c00 	.word	0x48000c00
 8003598:	48001000 	.word	0x48001000
 800359c:	48001400 	.word	0x48001400
 80035a0:	48001800 	.word	0x48001800
 80035a4:	40010400 	.word	0x40010400

080035a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	887b      	ldrh	r3, [r7, #2]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e001      	b.n	80035ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
 80035e4:	4613      	mov	r3, r2
 80035e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035e8:	787b      	ldrb	r3, [r7, #1]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800360c:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <HAL_PWREx_GetVoltageRange+0x18>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40007000 	.word	0x40007000

08003624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003632:	d130      	bne.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003634:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800363c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003640:	d038      	beq.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800364a:	4a1e      	ldr	r2, [pc, #120]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003652:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2232      	movs	r2, #50	@ 0x32
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	4a1b      	ldr	r2, [pc, #108]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0c9b      	lsrs	r3, r3, #18
 8003664:	3301      	adds	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003668:	e002      	b.n	8003670 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b01      	subs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003670:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367c:	d102      	bne.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x60>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f2      	bne.n	800366a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003690:	d110      	bne.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e00f      	b.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003696:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a2:	d007      	beq.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036a4:	4b07      	ldr	r3, [pc, #28]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036ac:	4a05      	ldr	r2, [pc, #20]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40007000 	.word	0x40007000
 80036c8:	20000000 	.word	0x20000000
 80036cc:	431bde83 	.word	0x431bde83

080036d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e3ca      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e2:	4b97      	ldr	r3, [pc, #604]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ec:	4b94      	ldr	r3, [pc, #592]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80e4 	beq.w	80038cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_RCC_OscConfig+0x4a>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	f040 808b 	bne.w	8003828 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b01      	cmp	r3, #1
 8003716:	f040 8087 	bne.w	8003828 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371a:	4b89      	ldr	r3, [pc, #548]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e3a2      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	4b82      	ldr	r3, [pc, #520]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_RCC_OscConfig+0x7c>
 8003742:	4b7f      	ldr	r3, [pc, #508]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800374a:	e005      	b.n	8003758 <HAL_RCC_OscConfig+0x88>
 800374c:	4b7c      	ldr	r3, [pc, #496]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003758:	4293      	cmp	r3, r2
 800375a:	d223      	bcs.n	80037a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fd1d 	bl	80041a0 <RCC_SetFlashLatencyFromMSIRange>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e383      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003770:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a72      	ldr	r2, [pc, #456]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003776:	f043 0308 	orr.w	r3, r3, #8
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b70      	ldr	r3, [pc, #448]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	496d      	ldr	r1, [pc, #436]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800378e:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	4968      	ldr	r1, [pc, #416]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
 80037a2:	e025      	b.n	80037f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a4:	4b66      	ldr	r3, [pc, #408]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a65      	ldr	r2, [pc, #404]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037aa:	f043 0308 	orr.w	r3, r3, #8
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b63      	ldr	r3, [pc, #396]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4960      	ldr	r1, [pc, #384]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	495b      	ldr	r1, [pc, #364]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fcdd 	bl	80041a0 <RCC_SetFlashLatencyFromMSIRange>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e343      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f0:	f000 fc4a 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b52      	ldr	r3, [pc, #328]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	4950      	ldr	r1, [pc, #320]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	4a4e      	ldr	r2, [pc, #312]	@ (8003948 <HAL_RCC_OscConfig+0x278>)
 800380e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003810:	4b4e      	ldr	r3, [pc, #312]	@ (800394c <HAL_RCC_OscConfig+0x27c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd ffb1 	bl	800177c <HAL_InitTick>
 800381a:	4603      	mov	r3, r0
 800381c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d052      	beq.n	80038ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	e327      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d032      	beq.n	8003896 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003830:	4b43      	ldr	r3, [pc, #268]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a42      	ldr	r2, [pc, #264]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800383c:	f7fd ffee 	bl	800181c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003844:	f7fd ffea 	bl	800181c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e310      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003856:	4b3a      	ldr	r3, [pc, #232]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003862:	4b37      	ldr	r3, [pc, #220]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a36      	ldr	r2, [pc, #216]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003868:	f043 0308 	orr.w	r3, r3, #8
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b34      	ldr	r3, [pc, #208]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4931      	ldr	r1, [pc, #196]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003880:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	492c      	ldr	r1, [pc, #176]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	e01a      	b.n	80038cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003896:	4b2a      	ldr	r3, [pc, #168]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a29      	ldr	r2, [pc, #164]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a2:	f7fd ffbb 	bl	800181c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038aa:	f7fd ffb7 	bl	800181c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e2dd      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038bc:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x1da>
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d074      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d005      	beq.n	80038ea <HAL_RCC_OscConfig+0x21a>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b0c      	cmp	r3, #12
 80038e2:	d10e      	bne.n	8003902 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d10b      	bne.n	8003902 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ea:	4b15      	ldr	r3, [pc, #84]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d064      	beq.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d160      	bne.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e2ba      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x24a>
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0b      	ldr	r2, [pc, #44]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e026      	b.n	8003968 <HAL_RCC_OscConfig+0x298>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003922:	d115      	bne.n	8003950 <HAL_RCC_OscConfig+0x280>
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a05      	ldr	r2, [pc, #20]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800392a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a02      	ldr	r2, [pc, #8]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x298>
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	0800a394 	.word	0x0800a394
 8003948:	20000000 	.word	0x20000000
 800394c:	20000004 	.word	0x20000004
 8003950:	4ba0      	ldr	r3, [pc, #640]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a9f      	ldr	r2, [pc, #636]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b9d      	ldr	r3, [pc, #628]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a9c      	ldr	r2, [pc, #624]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd ff54 	bl	800181c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003978:	f7fd ff50 	bl	800181c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	@ 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e276      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398a:	4b92      	ldr	r3, [pc, #584]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x2a8>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd ff40 	bl	800181c <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fd ff3c 	bl	800181c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	@ 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e262      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b2:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x2d0>
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d060      	beq.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_OscConfig+0x310>
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d119      	bne.n	8003a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d116      	bne.n	8003a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e0:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_OscConfig+0x328>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e23f      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b76      	ldr	r3, [pc, #472]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	4973      	ldr	r1, [pc, #460]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0c:	e040      	b.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d023      	beq.n	8003a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a16:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd fefb 	bl	800181c <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fd fef7 	bl	800181c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e21d      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3c:	4b65      	ldr	r3, [pc, #404]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b62      	ldr	r3, [pc, #392]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	495f      	ldr	r1, [pc, #380]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
 8003a5c:	e018      	b.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd fed7 	bl	800181c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fd fed3 	bl	800181c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1f9      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a84:	4b53      	ldr	r3, [pc, #332]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d03c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01c      	beq.n	8003ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fd feb2 	bl	800181c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fd feae 	bl	800181c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1d4      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ace:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ef      	beq.n	8003abc <HAL_RCC_OscConfig+0x3ec>
 8003adc:	e01b      	b.n	8003b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ade:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fd fe95 	bl	800181c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fd fe91 	bl	800181c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1b7      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b08:	4b32      	ldr	r3, [pc, #200]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ef      	bne.n	8003af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a6 	beq.w	8003c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b28:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	4a26      	ldr	r2, [pc, #152]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b50:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d118      	bne.n	8003b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b68:	f7fd fe58 	bl	800181c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b70:	f7fd fe54 	bl	800181c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e17a      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b82:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4d8>
 8003b96:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ba6:	e029      	b.n	8003bfc <HAL_RCC_OscConfig+0x52c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d115      	bne.n	8003bdc <HAL_RCC_OscConfig+0x50c>
 8003bb0:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	4a03      	ldr	r2, [pc, #12]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x52c>
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	4a9b      	ldr	r2, [pc, #620]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bec:	4b98      	ldr	r3, [pc, #608]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	4a97      	ldr	r2, [pc, #604]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d016      	beq.n	8003c32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd fe0a 	bl	800181c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7fd fe06 	bl	800181c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e12a      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c22:	4b8b      	ldr	r3, [pc, #556]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ed      	beq.n	8003c0c <HAL_RCC_OscConfig+0x53c>
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd fdf3 	bl	800181c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd fdef 	bl	800181c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e113      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c50:	4b7f      	ldr	r3, [pc, #508]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ed      	bne.n	8003c3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c5e:	7ffb      	ldrb	r3, [r7, #31]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b7a      	ldr	r3, [pc, #488]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	4a79      	ldr	r2, [pc, #484]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80fe 	beq.w	8003e76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	f040 80d0 	bne.w	8003e24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c84:	4b72      	ldr	r3, [pc, #456]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d130      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d127      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d11f      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cc4:	2a07      	cmp	r2, #7
 8003cc6:	bf14      	ite	ne
 8003cc8:	2201      	movne	r2, #1
 8003cca:	2200      	moveq	r2, #0
 8003ccc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d113      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d06e      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d069      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d00:	4b53      	ldr	r3, [pc, #332]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d0c:	4b50      	ldr	r3, [pc, #320]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0ad      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a4b      	ldr	r2, [pc, #300]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d28:	f7fd fd78 	bl	800181c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fd fd74 	bl	800181c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e09a      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d42:	4b43      	ldr	r3, [pc, #268]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4e:	4b40      	ldr	r3, [pc, #256]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	4b40      	ldr	r3, [pc, #256]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d5e:	3a01      	subs	r2, #1
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	4311      	orrs	r1, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d68:	0212      	lsls	r2, r2, #8
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d70:	0852      	lsrs	r2, r2, #1
 8003d72:	3a01      	subs	r2, #1
 8003d74:	0552      	lsls	r2, r2, #21
 8003d76:	4311      	orrs	r1, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d7c:	0852      	lsrs	r2, r2, #1
 8003d7e:	3a01      	subs	r2, #1
 8003d80:	0652      	lsls	r2, r2, #25
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d88:	0912      	lsrs	r2, r2, #4
 8003d8a:	0452      	lsls	r2, r2, #17
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	4930      	ldr	r1, [pc, #192]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d94:	4b2e      	ldr	r3, [pc, #184]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003da0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dac:	f7fd fd36 	bl	800181c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd fd32 	bl	800181c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e058      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	4b22      	ldr	r3, [pc, #136]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd2:	e050      	b.n	8003e76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04f      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d148      	bne.n	8003e76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003de4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df0:	4b17      	ldr	r3, [pc, #92]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dfc:	f7fd fd0e 	bl	800181c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fd fd0a 	bl	800181c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e030      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e16:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x734>
 8003e22:	e028      	b.n	8003e76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d023      	beq.n	8003e72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2a:	4b09      	ldr	r3, [pc, #36]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a08      	ldr	r2, [pc, #32]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fd fcf1 	bl	800181c <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3c:	e00c      	b.n	8003e58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fd fced 	bl	800181c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d905      	bls.n	8003e58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e013      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
 8003e50:	40021000 	.word	0x40021000
 8003e54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e58:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <HAL_RCC_OscConfig+0x7b0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ec      	bne.n	8003e3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <HAL_RCC_OscConfig+0x7b0>)
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	4905      	ldr	r1, [pc, #20]	@ (8003e80 <HAL_RCC_OscConfig+0x7b0>)
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_RCC_OscConfig+0x7b4>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
 8003e70:	e001      	b.n	8003e76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	feeefffc 	.word	0xfeeefffc

08003e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0e7      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e9c:	4b75      	ldr	r3, [pc, #468]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d910      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eaa:	4b72      	ldr	r3, [pc, #456]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 0207 	bic.w	r2, r3, #7
 8003eb2:	4970      	ldr	r1, [pc, #448]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b6e      	ldr	r3, [pc, #440]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0cf      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4b66      	ldr	r3, [pc, #408]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d908      	bls.n	8003efa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b63      	ldr	r3, [pc, #396]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4960      	ldr	r1, [pc, #384]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04c      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d121      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e0a6      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f26:	4b54      	ldr	r3, [pc, #336]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d115      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e09a      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e08e      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e086      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b46      	ldr	r3, [pc, #280]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4943      	ldr	r1, [pc, #268]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fd fc54 	bl	800181c <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fd fc50 	bl	800181c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e06e      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d010      	beq.n	8003fce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	4b31      	ldr	r3, [pc, #196]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d208      	bcs.n	8003fce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	492b      	ldr	r1, [pc, #172]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fce:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d210      	bcs.n	8003ffe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fdc:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 0207 	bic.w	r2, r3, #7
 8003fe4:	4923      	ldr	r1, [pc, #140]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fec:	4b21      	ldr	r3, [pc, #132]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d001      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e036      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800400a:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4918      	ldr	r1, [pc, #96]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4910      	ldr	r1, [pc, #64]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800403c:	f000 f824 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	490b      	ldr	r1, [pc, #44]	@ (800407c <HAL_RCC_ClockConfig+0x1f4>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
 8004058:	4a09      	ldr	r2, [pc, #36]	@ (8004080 <HAL_RCC_ClockConfig+0x1f8>)
 800405a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800405c:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_RCC_ClockConfig+0x1fc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd fb8b 	bl	800177c <HAL_InitTick>
 8004066:	4603      	mov	r3, r0
 8004068:	72fb      	strb	r3, [r7, #11]

  return status;
 800406a:	7afb      	ldrb	r3, [r7, #11]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40022000 	.word	0x40022000
 8004078:	40021000 	.word	0x40021000
 800407c:	0800a394 	.word	0x0800a394
 8004080:	20000000 	.word	0x20000000
 8004084:	20000004 	.word	0x20000004

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	@ 0x24
 800408c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004096:	4b3e      	ldr	r3, [pc, #248]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d121      	bne.n	80040fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d11e      	bne.n	80040fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040bc:	4b34      	ldr	r3, [pc, #208]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d107      	bne.n	80040d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040c8:	4b31      	ldr	r3, [pc, #196]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	e005      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10d      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d102      	bne.n	8004106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004100:	4b25      	ldr	r3, [pc, #148]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x110>)
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e004      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d101      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800410c:	4b23      	ldr	r3, [pc, #140]	@ (800419c <HAL_RCC_GetSysClockFreq+0x114>)
 800410e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d134      	bne.n	8004180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004116:	4b1e      	ldr	r3, [pc, #120]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d003      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0xa6>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d003      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0xac>
 800412c:	e005      	b.n	800413a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800412e:	4b1a      	ldr	r3, [pc, #104]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x110>)
 8004130:	617b      	str	r3, [r7, #20]
      break;
 8004132:	e005      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004134:	4b19      	ldr	r3, [pc, #100]	@ (800419c <HAL_RCC_GetSysClockFreq+0x114>)
 8004136:	617b      	str	r3, [r7, #20]
      break;
 8004138:	e002      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	617b      	str	r3, [r7, #20]
      break;
 800413e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004140:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	3301      	adds	r3, #1
 800414c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	fb03 f202 	mul.w	r2, r3, r2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004166:	4b0a      	ldr	r3, [pc, #40]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	0e5b      	lsrs	r3, r3, #25
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	3301      	adds	r3, #1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004180:	69bb      	ldr	r3, [r7, #24]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3724      	adds	r7, #36	@ 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	0800a3a4 	.word	0x0800a3a4
 8004198:	00f42400 	.word	0x00f42400
 800419c:	007a1200 	.word	0x007a1200

080041a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041b8:	f7ff fa26 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 80041bc:	6178      	str	r0, [r7, #20]
 80041be:	e014      	b.n	80041ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c0:	4b25      	ldr	r3, [pc, #148]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	4a24      	ldr	r2, [pc, #144]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80041cc:	4b22      	ldr	r3, [pc, #136]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041d8:	f7ff fa16 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 80041dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041de:	4b1e      	ldr	r3, [pc, #120]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f0:	d10b      	bne.n	800420a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b80      	cmp	r3, #128	@ 0x80
 80041f6:	d919      	bls.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80041fc:	d902      	bls.n	8004204 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041fe:	2302      	movs	r3, #2
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e013      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004204:	2301      	movs	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	e010      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b80      	cmp	r3, #128	@ 0x80
 800420e:	d902      	bls.n	8004216 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004210:	2303      	movs	r3, #3
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	e00a      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b80      	cmp	r3, #128	@ 0x80
 800421a:	d102      	bne.n	8004222 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800421c:	2302      	movs	r3, #2
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	e004      	b.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b70      	cmp	r3, #112	@ 0x70
 8004226:	d101      	bne.n	800422c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004228:	2301      	movs	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 0207 	bic.w	r2, r3, #7
 8004234:	4909      	ldr	r1, [pc, #36]	@ (800425c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800423c:	4b07      	ldr	r3, [pc, #28]	@ (800425c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	40022000 	.word	0x40022000

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004268:	2300      	movs	r3, #0
 800426a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800426c:	2300      	movs	r3, #0
 800426e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004278:	2b00      	cmp	r3, #0
 800427a:	d041      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004280:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004284:	d02a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004286:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800428a:	d824      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800428c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004290:	d008      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004292:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004296:	d81e      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800429c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a0:	d010      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042a2:	e018      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a4:	4b86      	ldr	r3, [pc, #536]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a85      	ldr	r2, [pc, #532]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b0:	e015      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fabb 	bl	8004834 <RCCEx_PLLSAI1_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042c2:	e00c      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3320      	adds	r3, #32
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fba6 	bl	8004a1c <RCCEx_PLLSAI2_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d4:	e003      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	74fb      	strb	r3, [r7, #19]
      break;
 80042da:	e000      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e4:	4b76      	ldr	r3, [pc, #472]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042f2:	4973      	ldr	r1, [pc, #460]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042fa:	e001      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d041      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004310:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004314:	d02a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004316:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800431a:	d824      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800431c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004320:	d008      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004322:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004326:	d81e      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800432c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004330:	d010      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004332:	e018      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004334:	4b62      	ldr	r3, [pc, #392]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a61      	ldr	r2, [pc, #388]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004340:	e015      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fa73 	bl	8004834 <RCCEx_PLLSAI1_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004352:	e00c      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3320      	adds	r3, #32
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fb5e 	bl	8004a1c <RCCEx_PLLSAI2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	74fb      	strb	r3, [r7, #19]
      break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800436c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004374:	4b52      	ldr	r3, [pc, #328]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004382:	494f      	ldr	r1, [pc, #316]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a0 	beq.w	80044de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043a2:	4b47      	ldr	r3, [pc, #284]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4b41      	ldr	r3, [pc, #260]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043bc:	4a40      	ldr	r2, [pc, #256]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043c4:	4b3e      	ldr	r3, [pc, #248]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d0:	2301      	movs	r3, #1
 80043d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d4:	4b3b      	ldr	r3, [pc, #236]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a3a      	ldr	r2, [pc, #232]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e0:	f7fd fa1c 	bl	800181c <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e6:	e009      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fd fa18 	bl	800181c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	74fb      	strb	r3, [r7, #19]
        break;
 80043fa:	e005      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043fc:	4b31      	ldr	r3, [pc, #196]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d15c      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800440e:	4b2c      	ldr	r3, [pc, #176]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004418:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	d019      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800442c:	4b24      	ldr	r3, [pc, #144]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004438:	4b21      	ldr	r3, [pc, #132]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	4a20      	ldr	r2, [pc, #128]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004448:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444e:	4a1c      	ldr	r2, [pc, #112]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004458:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fd f9d7 	bl	800181c <HAL_GetTick>
 800446e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004470:	e00b      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd f9d3 	bl	800181c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d902      	bls.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	74fb      	strb	r3, [r7, #19]
            break;
 8004488:	e006      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ec      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449e:	4b08      	ldr	r3, [pc, #32]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ae:	4904      	ldr	r1, [pc, #16]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044b6:	e009      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
 80044bc:	e006      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044cc:	7c7b      	ldrb	r3, [r7, #17]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d105      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d2:	4b9e      	ldr	r3, [pc, #632]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d6:	4a9d      	ldr	r2, [pc, #628]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ea:	4b98      	ldr	r3, [pc, #608]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f0:	f023 0203 	bic.w	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	4994      	ldr	r1, [pc, #592]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800450c:	4b8f      	ldr	r3, [pc, #572]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f023 020c 	bic.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451a:	498c      	ldr	r1, [pc, #560]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452e:	4b87      	ldr	r3, [pc, #540]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453c:	4983      	ldr	r1, [pc, #524]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004550:	4b7e      	ldr	r3, [pc, #504]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	497b      	ldr	r1, [pc, #492]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004572:	4b76      	ldr	r3, [pc, #472]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004580:	4972      	ldr	r1, [pc, #456]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004594:	4b6d      	ldr	r3, [pc, #436]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a2:	496a      	ldr	r1, [pc, #424]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b6:	4b65      	ldr	r3, [pc, #404]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c4:	4961      	ldr	r1, [pc, #388]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045d8:	4b5c      	ldr	r3, [pc, #368]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e6:	4959      	ldr	r1, [pc, #356]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fa:	4b54      	ldr	r3, [pc, #336]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004600:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004608:	4950      	ldr	r1, [pc, #320]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800461c:	4b4b      	ldr	r3, [pc, #300]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004622:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462a:	4948      	ldr	r1, [pc, #288]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463e:	4b43      	ldr	r3, [pc, #268]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004644:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464c:	493f      	ldr	r1, [pc, #252]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d028      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004660:	4b3a      	ldr	r3, [pc, #232]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004666:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800466e:	4937      	ldr	r1, [pc, #220]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800467e:	d106      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004680:	4b32      	ldr	r3, [pc, #200]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a31      	ldr	r2, [pc, #196]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800468a:	60d3      	str	r3, [r2, #12]
 800468c:	e011      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004692:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004696:	d10c      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f8c8 	bl	8004834 <RCCEx_PLLSAI1_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d028      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046be:	4b23      	ldr	r3, [pc, #140]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046cc:	491f      	ldr	r1, [pc, #124]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046dc:	d106      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046de:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046e8:	60d3      	str	r3, [r2, #12]
 80046ea:	e011      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f899 	bl	8004834 <RCCEx_PLLSAI1_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02b      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800471c:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472a:	4908      	ldr	r1, [pc, #32]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800473a:	d109      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473c:	4b03      	ldr	r3, [pc, #12]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a02      	ldr	r2, [pc, #8]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004746:	60d3      	str	r3, [r2, #12]
 8004748:	e014      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004754:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004758:	d10c      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f867 	bl	8004834 <RCCEx_PLLSAI1_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02f      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004780:	4b2b      	ldr	r3, [pc, #172]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800478e:	4928      	ldr	r1, [pc, #160]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800479a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800479e:	d10d      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f844 	bl	8004834 <RCCEx_PLLSAI1_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d014      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	74bb      	strb	r3, [r7, #18]
 80047ba:	e011      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3320      	adds	r3, #32
 80047ca:	2102      	movs	r1, #2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f925 	bl	8004a1c <RCCEx_PLLSAI2_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
 80047de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047ec:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047fa:	490d      	ldr	r1, [pc, #52]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800480e:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004814:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800481e:	4904      	ldr	r1, [pc, #16]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004826:	7cbb      	ldrb	r3, [r7, #18]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000

08004834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004842:	4b75      	ldr	r3, [pc, #468]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d018      	beq.n	8004880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800484e:	4b72      	ldr	r3, [pc, #456]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0203 	and.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d10d      	bne.n	800487a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
       ||
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004866:	4b6c      	ldr	r3, [pc, #432]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
       ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d047      	beq.n	800490a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
 800487e:	e044      	b.n	800490a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b03      	cmp	r3, #3
 8004886:	d018      	beq.n	80048ba <RCCEx_PLLSAI1_Config+0x86>
 8004888:	2b03      	cmp	r3, #3
 800488a:	d825      	bhi.n	80048d8 <RCCEx_PLLSAI1_Config+0xa4>
 800488c:	2b01      	cmp	r3, #1
 800488e:	d002      	beq.n	8004896 <RCCEx_PLLSAI1_Config+0x62>
 8004890:	2b02      	cmp	r3, #2
 8004892:	d009      	beq.n	80048a8 <RCCEx_PLLSAI1_Config+0x74>
 8004894:	e020      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004896:	4b60      	ldr	r3, [pc, #384]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d11d      	bne.n	80048de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a6:	e01a      	b.n	80048de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d116      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b8:	e013      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048ba:	4b57      	ldr	r3, [pc, #348]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048c6:	4b54      	ldr	r3, [pc, #336]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048d6:	e006      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
      break;
 80048dc:	e004      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10d      	bne.n	800490a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6819      	ldr	r1, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	3b01      	subs	r3, #1
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	430b      	orrs	r3, r1
 8004904:	4944      	ldr	r1, [pc, #272]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d17d      	bne.n	8004a0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004910:	4b41      	ldr	r3, [pc, #260]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a40      	ldr	r2, [pc, #256]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800491a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491c:	f7fc ff7e 	bl	800181c <HAL_GetTick>
 8004920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004922:	e009      	b.n	8004938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004924:	f7fc ff7a 	bl	800181c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d902      	bls.n	8004938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	73fb      	strb	r3, [r7, #15]
        break;
 8004936:	e005      	b.n	8004944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004938:	4b37      	ldr	r3, [pc, #220]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ef      	bne.n	8004924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d160      	bne.n	8004a0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d111      	bne.n	8004974 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004950:	4b31      	ldr	r3, [pc, #196]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6892      	ldr	r2, [r2, #8]
 8004960:	0211      	lsls	r1, r2, #8
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68d2      	ldr	r2, [r2, #12]
 8004966:	0912      	lsrs	r2, r2, #4
 8004968:	0452      	lsls	r2, r2, #17
 800496a:	430a      	orrs	r2, r1
 800496c:	492a      	ldr	r1, [pc, #168]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	610b      	str	r3, [r1, #16]
 8004972:	e027      	b.n	80049c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d112      	bne.n	80049a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497a:	4b27      	ldr	r3, [pc, #156]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004982:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6892      	ldr	r2, [r2, #8]
 800498a:	0211      	lsls	r1, r2, #8
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6912      	ldr	r2, [r2, #16]
 8004990:	0852      	lsrs	r2, r2, #1
 8004992:	3a01      	subs	r2, #1
 8004994:	0552      	lsls	r2, r2, #21
 8004996:	430a      	orrs	r2, r1
 8004998:	491f      	ldr	r1, [pc, #124]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	610b      	str	r3, [r1, #16]
 800499e:	e011      	b.n	80049c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6892      	ldr	r2, [r2, #8]
 80049b0:	0211      	lsls	r1, r2, #8
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6952      	ldr	r2, [r2, #20]
 80049b6:	0852      	lsrs	r2, r2, #1
 80049b8:	3a01      	subs	r2, #1
 80049ba:	0652      	lsls	r2, r2, #25
 80049bc:	430a      	orrs	r2, r1
 80049be:	4916      	ldr	r1, [pc, #88]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049c4:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a13      	ldr	r2, [pc, #76]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fc ff24 	bl	800181c <HAL_GetTick>
 80049d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d6:	e009      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d8:	f7fc ff20 	bl	800181c <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d902      	bls.n	80049ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	73fb      	strb	r3, [r7, #15]
          break;
 80049ea:	e005      	b.n	80049f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049fe:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	4904      	ldr	r1, [pc, #16]	@ (8004a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000

08004a1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d018      	beq.n	8004a68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a36:	4b67      	ldr	r3, [pc, #412]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0203 	and.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d10d      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
       ||
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a4e:	4b61      	ldr	r3, [pc, #388]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d047      	beq.n	8004af2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	e044      	b.n	8004af2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d018      	beq.n	8004aa2 <RCCEx_PLLSAI2_Config+0x86>
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d825      	bhi.n	8004ac0 <RCCEx_PLLSAI2_Config+0xa4>
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d002      	beq.n	8004a7e <RCCEx_PLLSAI2_Config+0x62>
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d009      	beq.n	8004a90 <RCCEx_PLLSAI2_Config+0x74>
 8004a7c:	e020      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a7e:	4b55      	ldr	r3, [pc, #340]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d11d      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8e:	e01a      	b.n	8004ac6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a90:	4b50      	ldr	r3, [pc, #320]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d116      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa0:	e013      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10f      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aae:	4b49      	ldr	r3, [pc, #292]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004abe:	e006      	b.n	8004ace <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac4:	e004      	b.n	8004ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e002      	b.n	8004ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aca:	bf00      	nop
 8004acc:	e000      	b.n	8004ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	430b      	orrs	r3, r1
 8004aec:	4939      	ldr	r1, [pc, #228]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d167      	bne.n	8004bc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004af8:	4b36      	ldr	r3, [pc, #216]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a35      	ldr	r2, [pc, #212]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b04:	f7fc fe8a 	bl	800181c <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b0a:	e009      	b.n	8004b20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b0c:	f7fc fe86 	bl	800181c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d902      	bls.n	8004b20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b1e:	e005      	b.n	8004b2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b20:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ef      	bne.n	8004b0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d14a      	bne.n	8004bc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d111      	bne.n	8004b5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b38:	4b26      	ldr	r3, [pc, #152]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6892      	ldr	r2, [r2, #8]
 8004b48:	0211      	lsls	r1, r2, #8
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68d2      	ldr	r2, [r2, #12]
 8004b4e:	0912      	lsrs	r2, r2, #4
 8004b50:	0452      	lsls	r2, r2, #17
 8004b52:	430a      	orrs	r2, r1
 8004b54:	491f      	ldr	r1, [pc, #124]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	614b      	str	r3, [r1, #20]
 8004b5a:	e011      	b.n	8004b80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6892      	ldr	r2, [r2, #8]
 8004b6c:	0211      	lsls	r1, r2, #8
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6912      	ldr	r2, [r2, #16]
 8004b72:	0852      	lsrs	r2, r2, #1
 8004b74:	3a01      	subs	r2, #1
 8004b76:	0652      	lsls	r2, r2, #25
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	4916      	ldr	r1, [pc, #88]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b80:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fc fe46 	bl	800181c <HAL_GetTick>
 8004b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b92:	e009      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b94:	f7fc fe42 	bl	800181c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d902      	bls.n	8004ba8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba6:	e005      	b.n	8004bb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ef      	beq.n	8004b94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbc:	695a      	ldr	r2, [r3, #20]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	4904      	ldr	r1, [pc, #16]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e095      	b.n	8004d16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bfa:	d009      	beq.n	8004c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61da      	str	r2, [r3, #28]
 8004c02:	e005      	b.n	8004c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc fc1c 	bl	8001468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c50:	d902      	bls.n	8004c58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e002      	b.n	8004c5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c66:	d007      	beq.n	8004c78 <HAL_SPI_Init+0xa0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c70:	d002      	beq.n	8004c78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	ea42 0103 	orr.w	r1, r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	0c1b      	lsrs	r3, r3, #16
 8004cd4:	f003 0204 	and.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004cf4:	ea42 0103 	orr.w	r1, r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b088      	sub	sp, #32
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d2e:	f7fc fd75 	bl	800181c <HAL_GetTick>
 8004d32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d001      	beq.n	8004d48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
 8004d46:	e15c      	b.n	8005002 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_Transmit+0x36>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e154      	b.n	8005002 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_SPI_Transmit+0x48>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e14d      	b.n	8005002 <HAL_SPI_Transmit+0x2e4>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2203      	movs	r2, #3
 8004d72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db8:	d10f      	bne.n	8004dda <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	d007      	beq.n	8004df8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e00:	d952      	bls.n	8004ea8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Transmit+0xf2>
 8004e0a:	8b7b      	ldrh	r3, [r7, #26]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d145      	bne.n	8004e9c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e34:	e032      	b.n	8004e9c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d112      	bne.n	8004e6a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	881a      	ldrh	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e68:	e018      	b.n	8004e9c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6a:	f7fc fcd7 	bl	800181c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d803      	bhi.n	8004e82 <HAL_SPI_Transmit+0x164>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_Transmit+0x16a>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0b2      	b.n	8005002 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1c7      	bne.n	8004e36 <HAL_SPI_Transmit+0x118>
 8004ea6:	e083      	b.n	8004fb0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_SPI_Transmit+0x198>
 8004eb0:	8b7b      	ldrh	r3, [r7, #26]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d177      	bne.n	8004fa6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d912      	bls.n	8004ee6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec4:	881a      	ldrh	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b02      	subs	r3, #2
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ee4:	e05f      	b.n	8004fa6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f0c:	e04b      	b.n	8004fa6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d12b      	bne.n	8004f74 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d912      	bls.n	8004f4c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	881a      	ldrh	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	1c9a      	adds	r2, r3, #2
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b02      	subs	r3, #2
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f4a:	e02c      	b.n	8004fa6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	7812      	ldrb	r2, [r2, #0]
 8004f58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f72:	e018      	b.n	8004fa6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f74:	f7fc fc52 	bl	800181c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d803      	bhi.n	8004f8c <HAL_SPI_Transmit+0x26e>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d102      	bne.n	8004f92 <HAL_SPI_Transmit+0x274>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e02d      	b.n	8005002 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ae      	bne.n	8004f0e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fad9 	bl	800556c <SPI_EndRxTxTransaction>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005000:	2300      	movs	r3, #0
  }
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	4613      	mov	r3, r2
 8005018:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b01      	cmp	r3, #1
 8005024:	d001      	beq.n	800502a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005026:	2302      	movs	r3, #2
 8005028:	e0d4      	b.n	80051d4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_SPI_Transmit_DMA+0x2a>
 8005030:	88fb      	ldrh	r3, [r7, #6]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e0cc      	b.n	80051d4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_SPI_Transmit_DMA+0x3c>
 8005044:	2302      	movs	r3, #2
 8005046:	e0c5      	b.n	80051d4 <HAL_SPI_Transmit_DMA+0x1c8>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2203      	movs	r2, #3
 8005054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	88fa      	ldrh	r2, [r7, #6]
 800506e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800509a:	d10f      	bne.n	80050bc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c0:	4a46      	ldr	r2, [pc, #280]	@ (80051dc <HAL_SPI_Transmit_DMA+0x1d0>)
 80050c2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	4a45      	ldr	r2, [pc, #276]	@ (80051e0 <HAL_SPI_Transmit_DMA+0x1d4>)
 80050ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	4a44      	ldr	r2, [pc, #272]	@ (80051e4 <HAL_SPI_Transmit_DMA+0x1d8>)
 80050d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d8:	2200      	movs	r2, #0
 80050da:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050ea:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050f4:	d82d      	bhi.n	8005152 <HAL_SPI_Transmit_DMA+0x146>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005100:	d127      	bne.n	8005152 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10f      	bne.n	8005130 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800511e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800512e:	e010      	b.n	8005152 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800513e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	3301      	adds	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515a:	4619      	mov	r1, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005168:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800516a:	f7fd ff33 	bl	8002fd4 <HAL_DMA_Start_IT>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005178:	f043 0210 	orr.w	r2, r3, #16
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e023      	b.n	80051d4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005196:	2b40      	cmp	r3, #64	@ 0x40
 8005198:	d007      	beq.n	80051aa <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0220 	orr.w	r2, r2, #32
 80051c0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0202 	orr.w	r2, r2, #2
 80051d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	080052d3 	.word	0x080052d3
 80051e0:	0800522d 	.word	0x0800522d
 80051e4:	080052ef 	.word	0x080052ef

080051e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800521e:	b2db      	uxtb	r3, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523a:	f7fc faef 	bl	800181c <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b20      	cmp	r3, #32
 800524c:	d03b      	beq.n	80052c6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0220 	bic.w	r2, r2, #32
 800525c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0202 	bic.w	r2, r2, #2
 800526c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	2164      	movs	r1, #100	@ 0x64
 8005272:	6978      	ldr	r0, [r7, #20]
 8005274:	f000 f97a 	bl	800556c <SPI_EndRxTxTransaction>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80052be:	6978      	ldr	r0, [r7, #20]
 80052c0:	f7ff ff9c 	bl	80051fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80052c4:	e002      	b.n	80052cc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f7fb fb2c 	bl	8000924 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052de:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7ff ff81 	bl	80051e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0203 	bic.w	r2, r2, #3
 800530a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005310:	f043 0210 	orr.w	r2, r3, #16
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff ff6b 	bl	80051fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005340:	f7fc fa6c 	bl	800181c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	4413      	add	r3, r2
 800534e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005350:	f7fc fa64 	bl	800181c <HAL_GetTick>
 8005354:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005356:	4b39      	ldr	r3, [pc, #228]	@ (800543c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	015b      	lsls	r3, r3, #5
 800535c:	0d1b      	lsrs	r3, r3, #20
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	fb02 f303 	mul.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005366:	e054      	b.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d050      	beq.n	8005412 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005370:	f7fc fa54 	bl	800181c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	429a      	cmp	r2, r3
 800537e:	d902      	bls.n	8005386 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d13d      	bne.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005394:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800539e:	d111      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053a8:	d004      	beq.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b2:	d107      	bne.n	80053c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053cc:	d10f      	bne.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e017      	b.n	8005432 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3b01      	subs	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	429a      	cmp	r2, r3
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	429a      	cmp	r2, r3
 800542e:	d19b      	bne.n	8005368 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000000 	.word	0x20000000

08005440 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	@ 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005452:	f7fc f9e3 	bl	800181c <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	4413      	add	r3, r2
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005462:	f7fc f9db 	bl	800181c <HAL_GetTick>
 8005466:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005470:	4b3d      	ldr	r3, [pc, #244]	@ (8005568 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	00da      	lsls	r2, r3, #3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	0d1b      	lsrs	r3, r3, #20
 8005480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005488:	e060      	b.n	800554c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005490:	d107      	bne.n	80054a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d050      	beq.n	800554c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054aa:	f7fc f9b7 	bl	800181c <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d902      	bls.n	80054c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d13d      	bne.n	800553c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054d8:	d111      	bne.n	80054fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e2:	d004      	beq.n	80054ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ec:	d107      	bne.n	80054fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005506:	d10f      	bne.n	8005528 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005526:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e010      	b.n	800555e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	3b01      	subs	r3, #1
 800554a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d196      	bne.n	800548a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	@ 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000000 	.word	0x20000000

0800556c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff ff5b 	bl	8005440 <SPI_WaitFifoStateUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d007      	beq.n	80055a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e027      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2180      	movs	r1, #128	@ 0x80
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fec0 	bl	8005330 <SPI_WaitFlagStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e014      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff ff34 	bl	8005440 <SPI_WaitFifoStateUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e2:	f043 0220 	orr.w	r2, r3, #32
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e000      	b.n	80055f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	7992      	ldrb	r2, [r2, #6]
 800560a:	08d2      	lsrs	r2, r2, #3
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	fb13 f302 	smulbb	r3, r3, r2
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	889b      	ldrh	r3, [r3, #4]
 800561c:	461a      	mov	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	885b      	ldrh	r3, [r3, #2]
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	461a      	mov	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	60da      	str	r2, [r3, #12]
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 800563e:	b490      	push	{r4, r7}
 8005640:	b086      	sub	sp, #24
 8005642:	af00      	add	r7, sp, #0
 8005644:	4604      	mov	r4, r0
 8005646:	4608      	mov	r0, r1
 8005648:	1d39      	adds	r1, r7, #4
 800564a:	e881 000c 	stmia.w	r1, {r2, r3}
 800564e:	4623      	mov	r3, r4
 8005650:	81fb      	strh	r3, [r7, #14]
 8005652:	4603      	mov	r3, r0
 8005654:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800565a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800565e:	88ba      	ldrh	r2, [r7, #4]
 8005660:	4293      	cmp	r3, r2
 8005662:	da04      	bge.n	800566e <code+0x30>
        code |= LEFT;
 8005664:	2201      	movs	r2, #1
 8005666:	7dfb      	ldrb	r3, [r7, #23]
 8005668:	4313      	orrs	r3, r2
 800566a:	75fb      	strb	r3, [r7, #23]
 800566c:	e008      	b.n	8005680 <code+0x42>
    } else if (x0 > window.x1) {
 800566e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005672:	893a      	ldrh	r2, [r7, #8]
 8005674:	4293      	cmp	r3, r2
 8005676:	dd03      	ble.n	8005680 <code+0x42>
        code |= RIGHT;
 8005678:	2202      	movs	r2, #2
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	4313      	orrs	r3, r2
 800567e:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8005680:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005684:	88fa      	ldrh	r2, [r7, #6]
 8005686:	4293      	cmp	r3, r2
 8005688:	da04      	bge.n	8005694 <code+0x56>
        code |= BOTTOM;
 800568a:	2204      	movs	r2, #4
 800568c:	7dfb      	ldrb	r3, [r7, #23]
 800568e:	4313      	orrs	r3, r2
 8005690:	75fb      	strb	r3, [r7, #23]
 8005692:	e008      	b.n	80056a6 <code+0x68>
    } else if (y0 > window.y1) {
 8005694:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005698:	897a      	ldrh	r2, [r7, #10]
 800569a:	4293      	cmp	r3, r2
 800569c:	dd03      	ble.n	80056a6 <code+0x68>
        code |= TOP;
 800569e:	2208      	movs	r2, #8
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc90      	pop	{r4, r7}
 80056b0:	4770      	bx	lr

080056b2 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b088      	sub	sp, #32
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80056cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80056d0:	cb0c      	ldmia	r3, {r2, r3}
 80056d2:	f7ff ffb4 	bl	800563e <code>
 80056d6:	4603      	mov	r3, r0
 80056d8:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80056e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80056ea:	cb0c      	ldmia	r3, {r2, r3}
 80056ec:	f7ff ffa7 	bl	800563e <code>
 80056f0:	4603      	mov	r3, r0
 80056f2:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 80056f4:	2300      	movs	r3, #0
 80056f6:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 80056f8:	7ffa      	ldrb	r2, [r7, #31]
 80056fa:	7fbb      	ldrb	r3, [r7, #30]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8005704:	2301      	movs	r3, #1
 8005706:	777b      	strb	r3, [r7, #29]
            break;
 8005708:	e0e9      	b.n	80058de <clip_line+0x22c>
        } else if (code0 & code1) {
 800570a:	7ffa      	ldrb	r2, [r7, #31]
 800570c:	7fbb      	ldrb	r3, [r7, #30]
 800570e:	4013      	ands	r3, r2
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 80e2 	bne.w	80058dc <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005720:	7ffb      	ldrb	r3, [r7, #31]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <clip_line+0x78>
 8005726:	7ffb      	ldrb	r3, [r7, #31]
 8005728:	e000      	b.n	800572c <clip_line+0x7a>
 800572a:	7fbb      	ldrb	r3, [r7, #30]
 800572c:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 800572e:	2208      	movs	r2, #8
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	4013      	ands	r3, r2
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d024      	beq.n	8005784 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005748:	4619      	mov	r1, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005750:	1acb      	subs	r3, r1, r3
 8005752:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8005754:	4608      	mov	r0, r1
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	f9b1 1000 	ldrsh.w	r1, [r1]
 800575c:	1a41      	subs	r1, r0, r1
 800575e:	fb03 f101 	mul.w	r1, r3, r1
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005768:	4618      	mov	r0, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005770:	1ac3      	subs	r3, r0, r3
 8005772:	fb91 f3f3 	sdiv	r3, r1, r3
 8005776:	b29b      	uxth	r3, r3
 8005778:	4413      	add	r3, r2
 800577a:	b29b      	uxth	r3, r3
 800577c:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 800577e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005780:	833b      	strh	r3, [r7, #24]
 8005782:	e07f      	b.n	8005884 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005784:	2204      	movs	r2, #4
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	4013      	ands	r3, r2
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d024      	beq.n	80057da <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005796:	b29a      	uxth	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800579e:	4619      	mov	r1, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057a6:	1acb      	subs	r3, r1, r3
 80057a8:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80057aa:	4608      	mov	r0, r1
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	f9b1 1000 	ldrsh.w	r1, [r1]
 80057b2:	1a41      	subs	r1, r0, r1
 80057b4:	fb03 f101 	mul.w	r1, r3, r1
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057be:	4618      	mov	r0, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057c6:	1ac3      	subs	r3, r0, r3
 80057c8:	fb91 f3f3 	sdiv	r3, r1, r3
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	4413      	add	r3, r2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 80057d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057d6:	833b      	strh	r3, [r7, #24]
 80057d8:	e054      	b.n	8005884 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 80057da:	2202      	movs	r2, #2
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	4013      	ands	r3, r2
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d024      	beq.n	8005830 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057f4:	4619      	mov	r1, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057fc:	1acb      	subs	r3, r1, r3
 80057fe:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8005800:	4608      	mov	r0, r1
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005808:	1a41      	subs	r1, r0, r1
 800580a:	fb03 f101 	mul.w	r1, r3, r1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005814:	4618      	mov	r0, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800581c:	1ac3      	subs	r3, r0, r3
 800581e:	fb91 f3f3 	sdiv	r3, r1, r3
 8005822:	b29b      	uxth	r3, r3
 8005824:	4413      	add	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800582a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800582c:	837b      	strh	r3, [r7, #26]
 800582e:	e029      	b.n	8005884 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8005830:	2201      	movs	r2, #1
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	4013      	ands	r3, r2
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d023      	beq.n	8005884 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005842:	b29a      	uxth	r2, r3
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800584a:	4619      	mov	r1, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005852:	1acb      	subs	r3, r1, r3
 8005854:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8005856:	4608      	mov	r0, r1
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800585e:	1a41      	subs	r1, r0, r1
 8005860:	fb03 f101 	mul.w	r1, r3, r1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800586a:	4618      	mov	r0, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005872:	1ac3      	subs	r3, r0, r3
 8005874:	fb91 f3f3 	sdiv	r3, r1, r3
 8005878:	b29b      	uxth	r3, r3
 800587a:	4413      	add	r3, r2
 800587c:	b29b      	uxth	r3, r3
 800587e:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8005880:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005882:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8005884:	7dfa      	ldrb	r2, [r7, #23]
 8005886:	7ffb      	ldrb	r3, [r7, #31]
 8005888:	429a      	cmp	r2, r3
 800588a:	d113      	bne.n	80058b4 <clip_line+0x202>
                *x0 = x;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8b7a      	ldrh	r2, [r7, #26]
 8005890:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	8b3a      	ldrh	r2, [r7, #24]
 8005896:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80058a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058a8:	cb0c      	ldmia	r3, {r2, r3}
 80058aa:	f7ff fec8 	bl	800563e <code>
 80058ae:	4603      	mov	r3, r0
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	e721      	b.n	80056f8 <clip_line+0x46>
            } else {
                *x1 = x;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8b7a      	ldrh	r2, [r7, #26]
 80058b8:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	8b3a      	ldrh	r2, [r7, #24]
 80058be:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80058cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058d0:	cb0c      	ldmia	r3, {r2, r3}
 80058d2:	f7ff feb4 	bl	800563e <code>
 80058d6:	4603      	mov	r3, r0
 80058d8:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 80058da:	e70d      	b.n	80056f8 <clip_line+0x46>
            break;
 80058dc:	bf00      	nop
            }
        }
    }

    return accept;
 80058de:	7f7b      	ldrb	r3, [r7, #29]
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	3306      	adds	r3, #6
 80058f8:	2208      	movs	r2, #8
 80058fa:	4619      	mov	r1, r3
 80058fc:	f000 fc96 	bl	800622c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	330e      	adds	r3, #14
 8005904:	781a      	ldrb	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	330f      	adds	r3, #15
 800590e:	781a      	ldrb	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	3310      	adds	r3, #16
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	72da      	strb	r2, [r3, #11]

    return 0;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b08e      	sub	sp, #56	@ 0x38
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8005934:	f107 0314 	add.w	r3, r7, #20
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff ffd4 	bl	80058e8 <fontx_meta>
 8005940:	4603      	mov	r3, r0
 8005942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (0 != status) {
 8005946:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <fontx_glyph+0x2c>
        return status;
 800594e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005952:	e077      	b.n	8005a44 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8005954:	7f7a      	ldrb	r2, [r7, #29]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800595a:	7fba      	ldrb	r2, [r7, #30]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8005960:	7f7b      	ldrb	r3, [r7, #29]
 8005962:	3307      	adds	r3, #7
 8005964:	2b00      	cmp	r3, #0
 8005966:	da00      	bge.n	800596a <fontx_glyph+0x42>
 8005968:	3307      	adds	r3, #7
 800596a:	10db      	asrs	r3, r3, #3
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	78da      	ldrb	r2, [r3, #3]
 8005976:	7fbb      	ldrb	r3, [r7, #30]
 8005978:	fb12 f303 	smulbb	r3, r2, r3
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8005982:	7ffb      	ldrb	r3, [r7, #31]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10f      	bne.n	80059a8 <fontx_glyph+0x80>
        if (code < 0x100) {
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2bff      	cmp	r3, #255	@ 0xff
 800598c:	d859      	bhi.n	8005a42 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	789b      	ldrb	r3, [r3, #2]
 8005992:	461a      	mov	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	3311      	adds	r3, #17
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	441a      	add	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e04d      	b.n	8005a44 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3312      	adds	r3, #18
 80059ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nc = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	637b      	str	r3, [r7, #52]	@ 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3311      	adds	r3, #17
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	633b      	str	r3, [r7, #48]	@ 0x30
        while (bc--) {
 80059ba:	e03d      	b.n	8005a38 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c4:	3301      	adds	r3, #1
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	4413      	add	r3, r2
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 80059ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d0:	3302      	adds	r3, #2
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	3303      	adds	r3, #3
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	4413      	add	r3, r2
 80059e0:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d31c      	bcc.n	8005a24 <fontx_glyph+0xfc>
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d818      	bhi.n	8005a24 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059fa:	4413      	add	r3, r2
 80059fc:	637b      	str	r3, [r7, #52]	@ 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3311      	adds	r3, #17
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	461a      	mov	r2, r3
                    nc * glyph->size
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	789b      	ldrb	r3, [r3, #2]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8005a14:	4413      	add	r3, r2
 8005a16:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	441a      	add	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e00f      	b.n	8005a44 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8005a24:	6a3a      	ldr	r2, [r7, #32]
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	1ad2      	subs	r2, r2, r3
 8005a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3301      	adds	r3, #1
 8005a30:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Next code block_table. */
            block_table += 4;
 8005a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a34:	3304      	adds	r3, #4
 8005a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (bc--) {
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	1e5a      	subs	r2, r3, #1
 8005a3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1bc      	bne.n	80059bc <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8005a42:	2301      	movs	r3, #1
 8005a44:	4618      	mov	r0, r3
 8005a46:	3738      	adds	r7, #56	@ 0x38
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	dd01      	ble.n	8005a62 <min+0x16>
        return b;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	e000      	b.n	8005a64 <min+0x18>
    };
    return a;
 8005a62:	687b      	ldr	r3, [r7, #4]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <max>:

static inline int max(int a, int b) {
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	dd01      	ble.n	8005a86 <max+0x16>
        return a;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	e000      	b.n	8005a88 <max+0x18>
    }
    return b;
 8005a86:	683b      	ldr	r3, [r7, #0]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8005a94:	b490      	push	{r4, r7}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	80fb      	strh	r3, [r7, #6]
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	80bb      	strh	r3, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	807b      	strh	r3, [r7, #2]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8005ab2:	4a08      	ldr	r2, [pc, #32]	@ (8005ad4 <hagl_set_clip_window+0x40>)
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8005ab8:	4a06      	ldr	r2, [pc, #24]	@ (8005ad4 <hagl_set_clip_window+0x40>)
 8005aba:	88bb      	ldrh	r3, [r7, #4]
 8005abc:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8005abe:	4a05      	ldr	r2, [pc, #20]	@ (8005ad4 <hagl_set_clip_window+0x40>)
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8005ac4:	4a03      	ldr	r2, [pc, #12]	@ (8005ad4 <hagl_set_clip_window+0x40>)
 8005ac6:	883b      	ldrh	r3, [r7, #0]
 8005ac8:	80d3      	strh	r3, [r2, #6]
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc90      	pop	{r4, r7}
 8005ad2:	4770      	bx	lr
 8005ad4:	2000000c 	.word	0x2000000c

08005ad8 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	80fb      	strh	r3, [r7, #6]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	80bb      	strh	r3, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8005aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aee:	4a12      	ldr	r2, [pc, #72]	@ (8005b38 <hagl_put_pixel+0x60>)
 8005af0:	8812      	ldrh	r2, [r2, #0]
 8005af2:	4293      	cmp	r3, r2
 8005af4:	db1a      	blt.n	8005b2c <hagl_put_pixel+0x54>
 8005af6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005afa:	4a0f      	ldr	r2, [pc, #60]	@ (8005b38 <hagl_put_pixel+0x60>)
 8005afc:	8852      	ldrh	r2, [r2, #2]
 8005afe:	4293      	cmp	r3, r2
 8005b00:	db14      	blt.n	8005b2c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b06:	4a0c      	ldr	r2, [pc, #48]	@ (8005b38 <hagl_put_pixel+0x60>)
 8005b08:	8892      	ldrh	r2, [r2, #4]
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	dc10      	bgt.n	8005b30 <hagl_put_pixel+0x58>
 8005b0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b12:	4a09      	ldr	r2, [pc, #36]	@ (8005b38 <hagl_put_pixel+0x60>)
 8005b14:	88d2      	ldrh	r2, [r2, #6]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	dc0a      	bgt.n	8005b30 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8005b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b22:	887a      	ldrh	r2, [r7, #2]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fa fe71 	bl	800080c <lcd_put_pixel>
 8005b2a:	e002      	b.n	8005b32 <hagl_put_pixel+0x5a>
        return;
 8005b2c:	bf00      	nop
 8005b2e:	e000      	b.n	8005b32 <hagl_put_pixel+0x5a>
        return;
 8005b30:	bf00      	nop
}
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	2000000c 	.word	0x2000000c

08005b3c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8005b3c:	b590      	push	{r4, r7, lr}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	4611      	mov	r1, r2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4623      	mov	r3, r4
 8005b4c:	80fb      	strh	r3, [r7, #6]
 8005b4e:	4603      	mov	r3, r0
 8005b50:	80bb      	strh	r3, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	807b      	strh	r3, [r7, #2]
 8005b56:	4613      	mov	r3, r2
 8005b58:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	887b      	ldrh	r3, [r7, #2]
 8005b5e:	4413      	add	r3, r2
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	b21a      	sxth	r2, r3
 8005b64:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005b68:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b6c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b70:	883b      	ldrh	r3, [r7, #0]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	4623      	mov	r3, r4
 8005b76:	f000 f805 	bl	8005b84 <hagl_draw_line>
#endif
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd90      	pop	{r4, r7, pc}
	...

08005b84 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8005b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b86:	b089      	sub	sp, #36	@ 0x24
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4623      	mov	r3, r4
 8005b94:	80fb      	strh	r3, [r7, #6]
 8005b96:	4603      	mov	r3, r0
 8005b98:	80bb      	strh	r3, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	807b      	strh	r3, [r7, #2]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	1cba      	adds	r2, r7, #2
 8005ba6:	1d3d      	adds	r5, r7, #4
 8005ba8:	1dbc      	adds	r4, r7, #6
 8005baa:	494a      	ldr	r1, [pc, #296]	@ (8005cd4 <hagl_draw_line+0x150>)
 8005bac:	466e      	mov	r6, sp
 8005bae:	c903      	ldmia	r1, {r0, r1}
 8005bb0:	e886 0003 	stmia.w	r6, {r0, r1}
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7ff fd7b 	bl	80056b2 <clip_line>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f083 0301 	eor.w	r3, r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d17e      	bne.n	8005cc6 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8005bc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bfb8      	it	lt
 8005bd8:	425b      	neglt	r3, r3
 8005bda:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8005bdc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005be0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	da01      	bge.n	8005bec <hagl_draw_line+0x68>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e001      	b.n	8005bf0 <hagl_draw_line+0x6c>
 8005bec:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf0:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8005bf2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfb8      	it	lt
 8005c02:	425b      	neglt	r3, r3
 8005c04:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8005c06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	da01      	bge.n	8005c16 <hagl_draw_line+0x92>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e001      	b.n	8005c1a <hagl_draw_line+0x96>
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8005c1c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005c20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	dd06      	ble.n	8005c36 <hagl_draw_line+0xb2>
 8005c28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c2c:	0fda      	lsrs	r2, r3, #31
 8005c2e:	4413      	add	r3, r2
 8005c30:	105b      	asrs	r3, r3, #1
 8005c32:	b21b      	sxth	r3, r3
 8005c34:	e006      	b.n	8005c44 <hagl_draw_line+0xc0>
 8005c36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c3a:	0fda      	lsrs	r2, r3, #31
 8005c3c:	4413      	add	r3, r2
 8005c3e:	105b      	asrs	r3, r3, #1
 8005c40:	425b      	negs	r3, r3
 8005c42:	b21b      	sxth	r3, r3
 8005c44:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8005c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c4e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff ff41 	bl	8005ad8 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8005c56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d105      	bne.n	8005c6e <hagl_draw_line+0xea>
 8005c62:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c66:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d02d      	beq.n	8005cca <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8005c6e:	8afb      	ldrh	r3, [r7, #22]
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8005c76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005c7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c7e:	425b      	negs	r3, r3
 8005c80:	429a      	cmp	r2, r3
 8005c82:	dd0c      	ble.n	8005c9e <hagl_draw_line+0x11a>
            err -= dy;
 8005c84:	8afa      	ldrh	r2, [r7, #22]
 8005c86:	8a3b      	ldrh	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8005c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	8a7b      	ldrh	r3, [r7, #18]
 8005c96:	4413      	add	r3, r2
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	b21b      	sxth	r3, r3
 8005c9c:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8005c9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005ca2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	dacd      	bge.n	8005c46 <hagl_draw_line+0xc2>
            err += dx;
 8005caa:	8afa      	ldrh	r2, [r7, #22]
 8005cac:	8abb      	ldrh	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8005cb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	89fb      	ldrh	r3, [r7, #14]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	b21b      	sxth	r3, r3
 8005cc2:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8005cc4:	e7bf      	b.n	8005c46 <hagl_draw_line+0xc2>
        return;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <hagl_draw_line+0x148>
            break;
 8005cca:	bf00      	nop
        }
    }
}
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	2000000c 	.word	0x2000000c

08005cd8 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	80fb      	strh	r3, [r7, #6]
 8005cea:	4603      	mov	r3, r0
 8005cec:	80bb      	strh	r3, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	807b      	strh	r3, [r7, #2]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8005cf6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	dd0e      	ble.n	8005d20 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8005d02:	88fa      	ldrh	r2, [r7, #6]
 8005d04:	887b      	ldrh	r3, [r7, #2]
 8005d06:	4413      	add	r3, r2
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8005d0c:	88fa      	ldrh	r2, [r7, #6]
 8005d0e:	887b      	ldrh	r3, [r7, #2]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	887b      	ldrh	r3, [r7, #2]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8005d20:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005d24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	dd0e      	ble.n	8005d4a <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8005d2c:	88ba      	ldrh	r2, [r7, #4]
 8005d2e:	883b      	ldrh	r3, [r7, #0]
 8005d30:	4413      	add	r3, r2
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8005d36:	88ba      	ldrh	r2, [r7, #4]
 8005d38:	883b      	ldrh	r3, [r7, #0]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8005d40:	88ba      	ldrh	r2, [r7, #4]
 8005d42:	883b      	ldrh	r3, [r7, #0]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8005d4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d4e:	4a33      	ldr	r2, [pc, #204]	@ (8005e1c <hagl_fill_rectangle+0x144>)
 8005d50:	8812      	ldrh	r2, [r2, #0]
 8005d52:	4293      	cmp	r3, r2
 8005d54:	db5b      	blt.n	8005e0e <hagl_fill_rectangle+0x136>
 8005d56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005d5a:	4a30      	ldr	r2, [pc, #192]	@ (8005e1c <hagl_fill_rectangle+0x144>)
 8005d5c:	8852      	ldrh	r2, [r2, #2]
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	db55      	blt.n	8005e0e <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d66:	4a2d      	ldr	r2, [pc, #180]	@ (8005e1c <hagl_fill_rectangle+0x144>)
 8005d68:	8892      	ldrh	r2, [r2, #4]
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	dc51      	bgt.n	8005e12 <hagl_fill_rectangle+0x13a>
 8005d6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005d72:	4a2a      	ldr	r2, [pc, #168]	@ (8005e1c <hagl_fill_rectangle+0x144>)
 8005d74:	88d2      	ldrh	r2, [r2, #6]
 8005d76:	4293      	cmp	r3, r2
 8005d78:	dc4b      	bgt.n	8005e12 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8005d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d7e:	4a27      	ldr	r2, [pc, #156]	@ (8005e1c <hagl_fill_rectangle+0x144>)
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	4611      	mov	r1, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff fe73 	bl	8005a70 <max>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8005d8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005d92:	4a22      	ldr	r2, [pc, #136]	@ (8005e1c <hagl_fill_rectangle+0x144>)
 8005d94:	8852      	ldrh	r2, [r2, #2]
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fe69 	bl	8005a70 <max>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8005da2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005da6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <hagl_fill_rectangle+0x144>)
 8005da8:	8892      	ldrh	r2, [r2, #4]
 8005daa:	4611      	mov	r1, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fe4d 	bl	8005a4c <min>
 8005db2:	4603      	mov	r3, r0
 8005db4:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8005db6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005dba:	4a18      	ldr	r2, [pc, #96]	@ (8005e1c <hagl_fill_rectangle+0x144>)
 8005dbc:	88d2      	ldrh	r2, [r2, #6]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fe43 	bl	8005a4c <min>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8005dca:	887a      	ldrh	r2, [r7, #2]
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8005dd6:	883a      	ldrh	r2, [r7, #0]
 8005dd8:	88bb      	ldrh	r3, [r7, #4]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3301      	adds	r3, #1
 8005de0:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8005de2:	2300      	movs	r3, #0
 8005de4:	81fb      	strh	r3, [r7, #14]
 8005de6:	e00d      	b.n	8005e04 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8005de8:	88ba      	ldrh	r2, [r7, #4]
 8005dea:	89fb      	ldrh	r3, [r7, #14]
 8005dec:	4413      	add	r3, r2
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	b219      	sxth	r1, r3
 8005df2:	8c3b      	ldrh	r3, [r7, #32]
 8005df4:	89ba      	ldrh	r2, [r7, #12]
 8005df6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005dfa:	f7ff fe9f 	bl	8005b3c <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8005dfe:	89fb      	ldrh	r3, [r7, #14]
 8005e00:	3301      	adds	r3, #1
 8005e02:	81fb      	strh	r3, [r7, #14]
 8005e04:	89fa      	ldrh	r2, [r7, #14]
 8005e06:	897b      	ldrh	r3, [r7, #10]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d3ed      	bcc.n	8005de8 <hagl_fill_rectangle+0x110>
 8005e0c:	e002      	b.n	8005e14 <hagl_fill_rectangle+0x13c>
        return;
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <hagl_fill_rectangle+0x13c>
        return;
 8005e12:	bf00      	nop
#endif
    }
}
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd90      	pop	{r4, r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	2000000c 	.word	0x2000000c

08005e20 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8005e2e:	f844 0c24 	str.w	r0, [r4, #-36]
 8005e32:	460c      	mov	r4, r1
 8005e34:	4610      	mov	r0, r2
 8005e36:	4619      	mov	r1, r3
 8005e38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	f823 2c26 	strh.w	r2, [r3, #-38]
 8005e42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005e46:	4602      	mov	r2, r0
 8005e48:	f823 2c28 	strh.w	r2, [r3, #-40]
 8005e4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005e50:	460a      	mov	r2, r1
 8005e52:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8005e56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f107 0310 	add.w	r3, r7, #16
 8005e60:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff fd5c 	bl	8005928 <fontx_glyph>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005e76:	f102 0209 	add.w	r2, r2, #9
 8005e7a:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8005e7c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8005e80:	f103 0309 	add.w	r3, r3, #9
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <hagl_put_char+0x6e>
        return 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e0c0      	b.n	8006010 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8005e8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005e92:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005e9c:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8005ea0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005ea4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005eae:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8005eb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8005ebc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005ec0:	3a08      	subs	r2, #8
 8005ec2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005ec6:	3b18      	subs	r3, #24
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fb94 	bl	80055f8 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8005ed0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005ed4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8005ed8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005edc:	f102 020c 	add.w	r2, r2, #12
 8005ee0:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005ee8:	f102 020b 	add.w	r2, r2, #11
 8005eec:	7013      	strb	r3, [r2, #0]
 8005eee:	e071      	b.n	8005fd4 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005ef6:	f102 020a 	add.w	r2, r2, #10
 8005efa:	7013      	strb	r3, [r2, #0]
 8005efc:	e047      	b.n	8005f8e <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8005efe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005f02:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	b25a      	sxtb	r2, r3
 8005f0a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8005f0e:	f103 030a 	add.w	r3, r3, #10
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	2180      	movs	r1, #128	@ 0x80
 8005f1a:	fa41 f303 	asr.w	r3, r1, r3
 8005f1e:	b25b      	sxtb	r3, r3
 8005f20:	4013      	ands	r3, r2
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005f28:	f102 0208 	add.w	r2, r2, #8
 8005f2c:	7013      	strb	r3, [r2, #0]
            if (set) {
 8005f2e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8005f32:	f103 0308 	add.w	r3, r3, #8
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <hagl_put_char+0x13e>
                *(ptr++) = color;
 8005f3c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8005f40:	f103 030c 	add.w	r3, r3, #12
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	1c9a      	adds	r2, r3, #2
 8005f48:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8005f4c:	f101 010c 	add.w	r1, r1, #12
 8005f50:	600a      	str	r2, [r1, #0]
 8005f52:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005f56:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e00c      	b.n	8005f78 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8005f5e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8005f62:	f103 030c 	add.w	r3, r3, #12
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	1c9a      	adds	r2, r3, #2
 8005f6a:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8005f6e:	f101 010c 	add.w	r1, r1, #12
 8005f72:	600a      	str	r2, [r1, #0]
 8005f74:	2200      	movs	r2, #0
 8005f76:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8005f78:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8005f7c:	f103 030a 	add.w	r3, r3, #10
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	3301      	adds	r3, #1
 8005f84:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005f88:	f102 020a 	add.w	r2, r2, #10
 8005f8c:	7013      	strb	r3, [r2, #0]
 8005f8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005f92:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005f96:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005f9a:	f102 020a 	add.w	r2, r2, #10
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d3ac      	bcc.n	8005efe <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8005fa4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005fa8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005fac:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005fb0:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005fba:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8005fbe:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8005fc2:	f103 030b 	add.w	r3, r3, #11
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005fce:	f102 020b 	add.w	r2, r2, #11
 8005fd2:	7013      	strb	r3, [r2, #0]
 8005fd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005fd8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8005fdc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8005fe0:	f102 020b 	add.w	r2, r2, #11
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d382      	bcc.n	8005ef0 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8005fea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005fee:	3b18      	subs	r3, #24
 8005ff0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005ff4:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8005ff8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005ffc:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006000:	461a      	mov	r2, r3
 8006002:	f000 f85a 	bl	80060ba <hagl_blit>

    return bitmap.width;
 8006006:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800600a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800600e:	b2db      	uxtb	r3, r3
}
 8006010:	4618      	mov	r0, r3
 8006012:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	bd90      	pop	{r4, r7, pc}

0800601c <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	@ 0x30
 8006020:	af02      	add	r7, sp, #8
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	461a      	mov	r2, r3
 800602a:	4603      	mov	r3, r0
 800602c:	817b      	strh	r3, [r7, #10]
 800602e:	460b      	mov	r3, r1
 8006030:	813b      	strh	r3, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8006036:	897b      	ldrh	r3, [r7, #10]
 8006038:	84fb      	strh	r3, [r7, #38]	@ 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800603a:	f107 0314 	add.w	r3, r7, #20
 800603e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fc51 	bl	80058e8 <fontx_meta>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (0 != status) {
 800604c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <hagl_put_text+0x3c>
        return 0;
 8006054:	2300      	movs	r3, #0
 8006056:	e02c      	b.n	80060b2 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	60fa      	str	r2, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	2b0d      	cmp	r3, #13
 8006066:	d002      	beq.n	800606e <hagl_put_text+0x52>
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	2b0a      	cmp	r3, #10
 800606c:	d108      	bne.n	8006080 <hagl_put_text+0x64>
            x0 = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8006072:	7fbb      	ldrb	r3, [r7, #30]
 8006074:	461a      	mov	r2, r3
 8006076:	893b      	ldrh	r3, [r7, #8]
 8006078:	4413      	add	r3, r2
 800607a:	b29b      	uxth	r3, r3
 800607c:	813b      	strh	r3, [r7, #8]
 800607e:	e010      	b.n	80060a2 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8006080:	88f8      	ldrh	r0, [r7, #6]
 8006082:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006086:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4603      	mov	r3, r0
 8006090:	6a38      	ldr	r0, [r7, #32]
 8006092:	f7ff fec5 	bl	8005e20 <hagl_put_char>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	897b      	ldrh	r3, [r7, #10]
 800609c:	4413      	add	r3, r2
 800609e:	b29b      	uxth	r3, r3
 80060a0:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1d6      	bne.n	8006058 <hagl_put_text+0x3c>

    return x0 - original;
 80060aa:	897a      	ldrh	r2, [r7, #10]
 80060ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	b29b      	uxth	r3, r3
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3728      	adds	r7, #40	@ 0x28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	4603      	mov	r3, r0
 80060c2:	603a      	str	r2, [r7, #0]
 80060c4:	80fb      	strh	r3, [r7, #6]
 80060c6:	460b      	mov	r3, r1
 80060c8:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80060d0:	2300      	movs	r3, #0
 80060d2:	827b      	strh	r3, [r7, #18]
 80060d4:	e020      	b.n	8006118 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80060d6:	2300      	movs	r3, #0
 80060d8:	823b      	strh	r3, [r7, #16]
 80060da:	e015      	b.n	8006108 <hagl_blit+0x4e>
            color = *(ptr++);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	1c9a      	adds	r2, r3, #2
 80060e0:	617a      	str	r2, [r7, #20]
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 80060e6:	88fa      	ldrh	r2, [r7, #6]
 80060e8:	8a3b      	ldrh	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	b218      	sxth	r0, r3
 80060f0:	88ba      	ldrh	r2, [r7, #4]
 80060f2:	8a7b      	ldrh	r3, [r7, #18]
 80060f4:	4413      	add	r3, r2
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	b21b      	sxth	r3, r3
 80060fa:	89fa      	ldrh	r2, [r7, #14]
 80060fc:	4619      	mov	r1, r3
 80060fe:	f7ff fceb 	bl	8005ad8 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006102:	8a3b      	ldrh	r3, [r7, #16]
 8006104:	3301      	adds	r3, #1
 8006106:	823b      	strh	r3, [r7, #16]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	8a3a      	ldrh	r2, [r7, #16]
 800610e:	429a      	cmp	r2, r3
 8006110:	d3e4      	bcc.n	80060dc <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006112:	8a7b      	ldrh	r3, [r7, #18]
 8006114:	3301      	adds	r3, #1
 8006116:	827b      	strh	r3, [r7, #18]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	885b      	ldrh	r3, [r3, #2]
 800611c:	8a7a      	ldrh	r2, [r7, #18]
 800611e:	429a      	cmp	r2, r3
 8006120:	d3d9      	bcc.n	80060d6 <hagl_blit+0x1c>
        }
    }
#endif
};
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8006132:	4b12      	ldr	r3, [pc, #72]	@ (800617c <hagl_clear_screen+0x50>)
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 8006138:	4b10      	ldr	r3, [pc, #64]	@ (800617c <hagl_clear_screen+0x50>)
 800613a:	885b      	ldrh	r3, [r3, #2]
 800613c:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 800613e:	4b0f      	ldr	r3, [pc, #60]	@ (800617c <hagl_clear_screen+0x50>)
 8006140:	889b      	ldrh	r3, [r3, #4]
 8006142:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 8006144:	4b0d      	ldr	r3, [pc, #52]	@ (800617c <hagl_clear_screen+0x50>)
 8006146:	88db      	ldrh	r3, [r3, #6]
 8006148:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 800614a:	237f      	movs	r3, #127	@ 0x7f
 800614c:	229f      	movs	r2, #159	@ 0x9f
 800614e:	2100      	movs	r1, #0
 8006150:	2000      	movs	r0, #0
 8006152:	f7ff fc9f 	bl	8005a94 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 8006156:	2300      	movs	r3, #0
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	237f      	movs	r3, #127	@ 0x7f
 800615c:	229f      	movs	r2, #159	@ 0x9f
 800615e:	2100      	movs	r1, #0
 8006160:	2000      	movs	r0, #0
 8006162:	f7ff fdb9 	bl	8005cd8 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 8006166:	883b      	ldrh	r3, [r7, #0]
 8006168:	887a      	ldrh	r2, [r7, #2]
 800616a:	88b9      	ldrh	r1, [r7, #4]
 800616c:	88f8      	ldrh	r0, [r7, #6]
 800616e:	f7ff fc91 	bl	8005a94 <hagl_set_clip_window>
#endif
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	2000000c 	.word	0x2000000c

08006180 <siprintf>:
 8006180:	b40e      	push	{r1, r2, r3}
 8006182:	b510      	push	{r4, lr}
 8006184:	b09d      	sub	sp, #116	@ 0x74
 8006186:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006188:	9002      	str	r0, [sp, #8]
 800618a:	9006      	str	r0, [sp, #24]
 800618c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006190:	480a      	ldr	r0, [pc, #40]	@ (80061bc <siprintf+0x3c>)
 8006192:	9107      	str	r1, [sp, #28]
 8006194:	9104      	str	r1, [sp, #16]
 8006196:	490a      	ldr	r1, [pc, #40]	@ (80061c0 <siprintf+0x40>)
 8006198:	f853 2b04 	ldr.w	r2, [r3], #4
 800619c:	9105      	str	r1, [sp, #20]
 800619e:	2400      	movs	r4, #0
 80061a0:	a902      	add	r1, sp, #8
 80061a2:	6800      	ldr	r0, [r0, #0]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061a8:	f000 f9a2 	bl	80064f0 <_svfiprintf_r>
 80061ac:	9b02      	ldr	r3, [sp, #8]
 80061ae:	701c      	strb	r4, [r3, #0]
 80061b0:	b01d      	add	sp, #116	@ 0x74
 80061b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b6:	b003      	add	sp, #12
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000014 	.word	0x20000014
 80061c0:	ffff0208 	.word	0xffff0208

080061c4 <memset>:
 80061c4:	4402      	add	r2, r0
 80061c6:	4603      	mov	r3, r0
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d100      	bne.n	80061ce <memset+0xa>
 80061cc:	4770      	bx	lr
 80061ce:	f803 1b01 	strb.w	r1, [r3], #1
 80061d2:	e7f9      	b.n	80061c8 <memset+0x4>

080061d4 <__errno>:
 80061d4:	4b01      	ldr	r3, [pc, #4]	@ (80061dc <__errno+0x8>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000014 	.word	0x20000014

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	@ (800621c <__libc_init_array+0x3c>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2600      	movs	r6, #0
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006224 <__libc_init_array+0x44>)
 80061f4:	f000 fc64 	bl	8006ac0 <_init>
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2600      	movs	r6, #0
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	0800a410 	.word	0x0800a410
 800621c:	0800a410 	.word	0x0800a410
 8006220:	0800a410 	.word	0x0800a410
 8006224:	0800a414 	.word	0x0800a414

08006228 <__retarget_lock_acquire_recursive>:
 8006228:	4770      	bx	lr

0800622a <__retarget_lock_release_recursive>:
 800622a:	4770      	bx	lr

0800622c <memcpy>:
 800622c:	440a      	add	r2, r1
 800622e:	4291      	cmp	r1, r2
 8006230:	f100 33ff 	add.w	r3, r0, #4294967295
 8006234:	d100      	bne.n	8006238 <memcpy+0xc>
 8006236:	4770      	bx	lr
 8006238:	b510      	push	{r4, lr}
 800623a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800623e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006242:	4291      	cmp	r1, r2
 8006244:	d1f9      	bne.n	800623a <memcpy+0xe>
 8006246:	bd10      	pop	{r4, pc}

08006248 <_free_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4605      	mov	r5, r0
 800624c:	2900      	cmp	r1, #0
 800624e:	d041      	beq.n	80062d4 <_free_r+0x8c>
 8006250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006254:	1f0c      	subs	r4, r1, #4
 8006256:	2b00      	cmp	r3, #0
 8006258:	bfb8      	it	lt
 800625a:	18e4      	addlt	r4, r4, r3
 800625c:	f000 f8e0 	bl	8006420 <__malloc_lock>
 8006260:	4a1d      	ldr	r2, [pc, #116]	@ (80062d8 <_free_r+0x90>)
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	b933      	cbnz	r3, 8006274 <_free_r+0x2c>
 8006266:	6063      	str	r3, [r4, #4]
 8006268:	6014      	str	r4, [r2, #0]
 800626a:	4628      	mov	r0, r5
 800626c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006270:	f000 b8dc 	b.w	800642c <__malloc_unlock>
 8006274:	42a3      	cmp	r3, r4
 8006276:	d908      	bls.n	800628a <_free_r+0x42>
 8006278:	6820      	ldr	r0, [r4, #0]
 800627a:	1821      	adds	r1, r4, r0
 800627c:	428b      	cmp	r3, r1
 800627e:	bf01      	itttt	eq
 8006280:	6819      	ldreq	r1, [r3, #0]
 8006282:	685b      	ldreq	r3, [r3, #4]
 8006284:	1809      	addeq	r1, r1, r0
 8006286:	6021      	streq	r1, [r4, #0]
 8006288:	e7ed      	b.n	8006266 <_free_r+0x1e>
 800628a:	461a      	mov	r2, r3
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	b10b      	cbz	r3, 8006294 <_free_r+0x4c>
 8006290:	42a3      	cmp	r3, r4
 8006292:	d9fa      	bls.n	800628a <_free_r+0x42>
 8006294:	6811      	ldr	r1, [r2, #0]
 8006296:	1850      	adds	r0, r2, r1
 8006298:	42a0      	cmp	r0, r4
 800629a:	d10b      	bne.n	80062b4 <_free_r+0x6c>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	4401      	add	r1, r0
 80062a0:	1850      	adds	r0, r2, r1
 80062a2:	4283      	cmp	r3, r0
 80062a4:	6011      	str	r1, [r2, #0]
 80062a6:	d1e0      	bne.n	800626a <_free_r+0x22>
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	6053      	str	r3, [r2, #4]
 80062ae:	4408      	add	r0, r1
 80062b0:	6010      	str	r0, [r2, #0]
 80062b2:	e7da      	b.n	800626a <_free_r+0x22>
 80062b4:	d902      	bls.n	80062bc <_free_r+0x74>
 80062b6:	230c      	movs	r3, #12
 80062b8:	602b      	str	r3, [r5, #0]
 80062ba:	e7d6      	b.n	800626a <_free_r+0x22>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	1821      	adds	r1, r4, r0
 80062c0:	428b      	cmp	r3, r1
 80062c2:	bf04      	itt	eq
 80062c4:	6819      	ldreq	r1, [r3, #0]
 80062c6:	685b      	ldreq	r3, [r3, #4]
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	bf04      	itt	eq
 80062cc:	1809      	addeq	r1, r1, r0
 80062ce:	6021      	streq	r1, [r4, #0]
 80062d0:	6054      	str	r4, [r2, #4]
 80062d2:	e7ca      	b.n	800626a <_free_r+0x22>
 80062d4:	bd38      	pop	{r3, r4, r5, pc}
 80062d6:	bf00      	nop
 80062d8:	2000a394 	.word	0x2000a394

080062dc <sbrk_aligned>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4e0f      	ldr	r6, [pc, #60]	@ (800631c <sbrk_aligned+0x40>)
 80062e0:	460c      	mov	r4, r1
 80062e2:	6831      	ldr	r1, [r6, #0]
 80062e4:	4605      	mov	r5, r0
 80062e6:	b911      	cbnz	r1, 80062ee <sbrk_aligned+0x12>
 80062e8:	f000 fba4 	bl	8006a34 <_sbrk_r>
 80062ec:	6030      	str	r0, [r6, #0]
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 fb9f 	bl	8006a34 <_sbrk_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	d103      	bne.n	8006302 <sbrk_aligned+0x26>
 80062fa:	f04f 34ff 	mov.w	r4, #4294967295
 80062fe:	4620      	mov	r0, r4
 8006300:	bd70      	pop	{r4, r5, r6, pc}
 8006302:	1cc4      	adds	r4, r0, #3
 8006304:	f024 0403 	bic.w	r4, r4, #3
 8006308:	42a0      	cmp	r0, r4
 800630a:	d0f8      	beq.n	80062fe <sbrk_aligned+0x22>
 800630c:	1a21      	subs	r1, r4, r0
 800630e:	4628      	mov	r0, r5
 8006310:	f000 fb90 	bl	8006a34 <_sbrk_r>
 8006314:	3001      	adds	r0, #1
 8006316:	d1f2      	bne.n	80062fe <sbrk_aligned+0x22>
 8006318:	e7ef      	b.n	80062fa <sbrk_aligned+0x1e>
 800631a:	bf00      	nop
 800631c:	2000a390 	.word	0x2000a390

08006320 <_malloc_r>:
 8006320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006324:	1ccd      	adds	r5, r1, #3
 8006326:	f025 0503 	bic.w	r5, r5, #3
 800632a:	3508      	adds	r5, #8
 800632c:	2d0c      	cmp	r5, #12
 800632e:	bf38      	it	cc
 8006330:	250c      	movcc	r5, #12
 8006332:	2d00      	cmp	r5, #0
 8006334:	4606      	mov	r6, r0
 8006336:	db01      	blt.n	800633c <_malloc_r+0x1c>
 8006338:	42a9      	cmp	r1, r5
 800633a:	d904      	bls.n	8006346 <_malloc_r+0x26>
 800633c:	230c      	movs	r3, #12
 800633e:	6033      	str	r3, [r6, #0]
 8006340:	2000      	movs	r0, #0
 8006342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800641c <_malloc_r+0xfc>
 800634a:	f000 f869 	bl	8006420 <__malloc_lock>
 800634e:	f8d8 3000 	ldr.w	r3, [r8]
 8006352:	461c      	mov	r4, r3
 8006354:	bb44      	cbnz	r4, 80063a8 <_malloc_r+0x88>
 8006356:	4629      	mov	r1, r5
 8006358:	4630      	mov	r0, r6
 800635a:	f7ff ffbf 	bl	80062dc <sbrk_aligned>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	4604      	mov	r4, r0
 8006362:	d158      	bne.n	8006416 <_malloc_r+0xf6>
 8006364:	f8d8 4000 	ldr.w	r4, [r8]
 8006368:	4627      	mov	r7, r4
 800636a:	2f00      	cmp	r7, #0
 800636c:	d143      	bne.n	80063f6 <_malloc_r+0xd6>
 800636e:	2c00      	cmp	r4, #0
 8006370:	d04b      	beq.n	800640a <_malloc_r+0xea>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	4639      	mov	r1, r7
 8006376:	4630      	mov	r0, r6
 8006378:	eb04 0903 	add.w	r9, r4, r3
 800637c:	f000 fb5a 	bl	8006a34 <_sbrk_r>
 8006380:	4581      	cmp	r9, r0
 8006382:	d142      	bne.n	800640a <_malloc_r+0xea>
 8006384:	6821      	ldr	r1, [r4, #0]
 8006386:	1a6d      	subs	r5, r5, r1
 8006388:	4629      	mov	r1, r5
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff ffa6 	bl	80062dc <sbrk_aligned>
 8006390:	3001      	adds	r0, #1
 8006392:	d03a      	beq.n	800640a <_malloc_r+0xea>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	442b      	add	r3, r5
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	f8d8 3000 	ldr.w	r3, [r8]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	bb62      	cbnz	r2, 80063fc <_malloc_r+0xdc>
 80063a2:	f8c8 7000 	str.w	r7, [r8]
 80063a6:	e00f      	b.n	80063c8 <_malloc_r+0xa8>
 80063a8:	6822      	ldr	r2, [r4, #0]
 80063aa:	1b52      	subs	r2, r2, r5
 80063ac:	d420      	bmi.n	80063f0 <_malloc_r+0xd0>
 80063ae:	2a0b      	cmp	r2, #11
 80063b0:	d917      	bls.n	80063e2 <_malloc_r+0xc2>
 80063b2:	1961      	adds	r1, r4, r5
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	6025      	str	r5, [r4, #0]
 80063b8:	bf18      	it	ne
 80063ba:	6059      	strne	r1, [r3, #4]
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	bf08      	it	eq
 80063c0:	f8c8 1000 	streq.w	r1, [r8]
 80063c4:	5162      	str	r2, [r4, r5]
 80063c6:	604b      	str	r3, [r1, #4]
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 f82f 	bl	800642c <__malloc_unlock>
 80063ce:	f104 000b 	add.w	r0, r4, #11
 80063d2:	1d23      	adds	r3, r4, #4
 80063d4:	f020 0007 	bic.w	r0, r0, #7
 80063d8:	1ac2      	subs	r2, r0, r3
 80063da:	bf1c      	itt	ne
 80063dc:	1a1b      	subne	r3, r3, r0
 80063de:	50a3      	strne	r3, [r4, r2]
 80063e0:	e7af      	b.n	8006342 <_malloc_r+0x22>
 80063e2:	6862      	ldr	r2, [r4, #4]
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	bf0c      	ite	eq
 80063e8:	f8c8 2000 	streq.w	r2, [r8]
 80063ec:	605a      	strne	r2, [r3, #4]
 80063ee:	e7eb      	b.n	80063c8 <_malloc_r+0xa8>
 80063f0:	4623      	mov	r3, r4
 80063f2:	6864      	ldr	r4, [r4, #4]
 80063f4:	e7ae      	b.n	8006354 <_malloc_r+0x34>
 80063f6:	463c      	mov	r4, r7
 80063f8:	687f      	ldr	r7, [r7, #4]
 80063fa:	e7b6      	b.n	800636a <_malloc_r+0x4a>
 80063fc:	461a      	mov	r2, r3
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	42a3      	cmp	r3, r4
 8006402:	d1fb      	bne.n	80063fc <_malloc_r+0xdc>
 8006404:	2300      	movs	r3, #0
 8006406:	6053      	str	r3, [r2, #4]
 8006408:	e7de      	b.n	80063c8 <_malloc_r+0xa8>
 800640a:	230c      	movs	r3, #12
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	4630      	mov	r0, r6
 8006410:	f000 f80c 	bl	800642c <__malloc_unlock>
 8006414:	e794      	b.n	8006340 <_malloc_r+0x20>
 8006416:	6005      	str	r5, [r0, #0]
 8006418:	e7d6      	b.n	80063c8 <_malloc_r+0xa8>
 800641a:	bf00      	nop
 800641c:	2000a394 	.word	0x2000a394

08006420 <__malloc_lock>:
 8006420:	4801      	ldr	r0, [pc, #4]	@ (8006428 <__malloc_lock+0x8>)
 8006422:	f7ff bf01 	b.w	8006228 <__retarget_lock_acquire_recursive>
 8006426:	bf00      	nop
 8006428:	2000a38c 	.word	0x2000a38c

0800642c <__malloc_unlock>:
 800642c:	4801      	ldr	r0, [pc, #4]	@ (8006434 <__malloc_unlock+0x8>)
 800642e:	f7ff befc 	b.w	800622a <__retarget_lock_release_recursive>
 8006432:	bf00      	nop
 8006434:	2000a38c 	.word	0x2000a38c

08006438 <__ssputs_r>:
 8006438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	688e      	ldr	r6, [r1, #8]
 800643e:	461f      	mov	r7, r3
 8006440:	42be      	cmp	r6, r7
 8006442:	680b      	ldr	r3, [r1, #0]
 8006444:	4682      	mov	sl, r0
 8006446:	460c      	mov	r4, r1
 8006448:	4690      	mov	r8, r2
 800644a:	d82d      	bhi.n	80064a8 <__ssputs_r+0x70>
 800644c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006450:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006454:	d026      	beq.n	80064a4 <__ssputs_r+0x6c>
 8006456:	6965      	ldr	r5, [r4, #20]
 8006458:	6909      	ldr	r1, [r1, #16]
 800645a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800645e:	eba3 0901 	sub.w	r9, r3, r1
 8006462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006466:	1c7b      	adds	r3, r7, #1
 8006468:	444b      	add	r3, r9
 800646a:	106d      	asrs	r5, r5, #1
 800646c:	429d      	cmp	r5, r3
 800646e:	bf38      	it	cc
 8006470:	461d      	movcc	r5, r3
 8006472:	0553      	lsls	r3, r2, #21
 8006474:	d527      	bpl.n	80064c6 <__ssputs_r+0x8e>
 8006476:	4629      	mov	r1, r5
 8006478:	f7ff ff52 	bl	8006320 <_malloc_r>
 800647c:	4606      	mov	r6, r0
 800647e:	b360      	cbz	r0, 80064da <__ssputs_r+0xa2>
 8006480:	6921      	ldr	r1, [r4, #16]
 8006482:	464a      	mov	r2, r9
 8006484:	f7ff fed2 	bl	800622c <memcpy>
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800648e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	6126      	str	r6, [r4, #16]
 8006496:	6165      	str	r5, [r4, #20]
 8006498:	444e      	add	r6, r9
 800649a:	eba5 0509 	sub.w	r5, r5, r9
 800649e:	6026      	str	r6, [r4, #0]
 80064a0:	60a5      	str	r5, [r4, #8]
 80064a2:	463e      	mov	r6, r7
 80064a4:	42be      	cmp	r6, r7
 80064a6:	d900      	bls.n	80064aa <__ssputs_r+0x72>
 80064a8:	463e      	mov	r6, r7
 80064aa:	6820      	ldr	r0, [r4, #0]
 80064ac:	4632      	mov	r2, r6
 80064ae:	4641      	mov	r1, r8
 80064b0:	f000 faa6 	bl	8006a00 <memmove>
 80064b4:	68a3      	ldr	r3, [r4, #8]
 80064b6:	1b9b      	subs	r3, r3, r6
 80064b8:	60a3      	str	r3, [r4, #8]
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	4433      	add	r3, r6
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	2000      	movs	r0, #0
 80064c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c6:	462a      	mov	r2, r5
 80064c8:	f000 fac4 	bl	8006a54 <_realloc_r>
 80064cc:	4606      	mov	r6, r0
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d1e0      	bne.n	8006494 <__ssputs_r+0x5c>
 80064d2:	6921      	ldr	r1, [r4, #16]
 80064d4:	4650      	mov	r0, sl
 80064d6:	f7ff feb7 	bl	8006248 <_free_r>
 80064da:	230c      	movs	r3, #12
 80064dc:	f8ca 3000 	str.w	r3, [sl]
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	e7e9      	b.n	80064c2 <__ssputs_r+0x8a>
	...

080064f0 <_svfiprintf_r>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	4698      	mov	r8, r3
 80064f6:	898b      	ldrh	r3, [r1, #12]
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	b09d      	sub	sp, #116	@ 0x74
 80064fc:	4607      	mov	r7, r0
 80064fe:	460d      	mov	r5, r1
 8006500:	4614      	mov	r4, r2
 8006502:	d510      	bpl.n	8006526 <_svfiprintf_r+0x36>
 8006504:	690b      	ldr	r3, [r1, #16]
 8006506:	b973      	cbnz	r3, 8006526 <_svfiprintf_r+0x36>
 8006508:	2140      	movs	r1, #64	@ 0x40
 800650a:	f7ff ff09 	bl	8006320 <_malloc_r>
 800650e:	6028      	str	r0, [r5, #0]
 8006510:	6128      	str	r0, [r5, #16]
 8006512:	b930      	cbnz	r0, 8006522 <_svfiprintf_r+0x32>
 8006514:	230c      	movs	r3, #12
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	b01d      	add	sp, #116	@ 0x74
 800651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006522:	2340      	movs	r3, #64	@ 0x40
 8006524:	616b      	str	r3, [r5, #20]
 8006526:	2300      	movs	r3, #0
 8006528:	9309      	str	r3, [sp, #36]	@ 0x24
 800652a:	2320      	movs	r3, #32
 800652c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006530:	f8cd 800c 	str.w	r8, [sp, #12]
 8006534:	2330      	movs	r3, #48	@ 0x30
 8006536:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80066d4 <_svfiprintf_r+0x1e4>
 800653a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800653e:	f04f 0901 	mov.w	r9, #1
 8006542:	4623      	mov	r3, r4
 8006544:	469a      	mov	sl, r3
 8006546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800654a:	b10a      	cbz	r2, 8006550 <_svfiprintf_r+0x60>
 800654c:	2a25      	cmp	r2, #37	@ 0x25
 800654e:	d1f9      	bne.n	8006544 <_svfiprintf_r+0x54>
 8006550:	ebba 0b04 	subs.w	fp, sl, r4
 8006554:	d00b      	beq.n	800656e <_svfiprintf_r+0x7e>
 8006556:	465b      	mov	r3, fp
 8006558:	4622      	mov	r2, r4
 800655a:	4629      	mov	r1, r5
 800655c:	4638      	mov	r0, r7
 800655e:	f7ff ff6b 	bl	8006438 <__ssputs_r>
 8006562:	3001      	adds	r0, #1
 8006564:	f000 80a7 	beq.w	80066b6 <_svfiprintf_r+0x1c6>
 8006568:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800656a:	445a      	add	r2, fp
 800656c:	9209      	str	r2, [sp, #36]	@ 0x24
 800656e:	f89a 3000 	ldrb.w	r3, [sl]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 809f 	beq.w	80066b6 <_svfiprintf_r+0x1c6>
 8006578:	2300      	movs	r3, #0
 800657a:	f04f 32ff 	mov.w	r2, #4294967295
 800657e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006582:	f10a 0a01 	add.w	sl, sl, #1
 8006586:	9304      	str	r3, [sp, #16]
 8006588:	9307      	str	r3, [sp, #28]
 800658a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800658e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006590:	4654      	mov	r4, sl
 8006592:	2205      	movs	r2, #5
 8006594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006598:	484e      	ldr	r0, [pc, #312]	@ (80066d4 <_svfiprintf_r+0x1e4>)
 800659a:	f7f9 fe19 	bl	80001d0 <memchr>
 800659e:	9a04      	ldr	r2, [sp, #16]
 80065a0:	b9d8      	cbnz	r0, 80065da <_svfiprintf_r+0xea>
 80065a2:	06d0      	lsls	r0, r2, #27
 80065a4:	bf44      	itt	mi
 80065a6:	2320      	movmi	r3, #32
 80065a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ac:	0711      	lsls	r1, r2, #28
 80065ae:	bf44      	itt	mi
 80065b0:	232b      	movmi	r3, #43	@ 0x2b
 80065b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065b6:	f89a 3000 	ldrb.w	r3, [sl]
 80065ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80065bc:	d015      	beq.n	80065ea <_svfiprintf_r+0xfa>
 80065be:	9a07      	ldr	r2, [sp, #28]
 80065c0:	4654      	mov	r4, sl
 80065c2:	2000      	movs	r0, #0
 80065c4:	f04f 0c0a 	mov.w	ip, #10
 80065c8:	4621      	mov	r1, r4
 80065ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ce:	3b30      	subs	r3, #48	@ 0x30
 80065d0:	2b09      	cmp	r3, #9
 80065d2:	d94b      	bls.n	800666c <_svfiprintf_r+0x17c>
 80065d4:	b1b0      	cbz	r0, 8006604 <_svfiprintf_r+0x114>
 80065d6:	9207      	str	r2, [sp, #28]
 80065d8:	e014      	b.n	8006604 <_svfiprintf_r+0x114>
 80065da:	eba0 0308 	sub.w	r3, r0, r8
 80065de:	fa09 f303 	lsl.w	r3, r9, r3
 80065e2:	4313      	orrs	r3, r2
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	46a2      	mov	sl, r4
 80065e8:	e7d2      	b.n	8006590 <_svfiprintf_r+0xa0>
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	1d19      	adds	r1, r3, #4
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	9103      	str	r1, [sp, #12]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfbb      	ittet	lt
 80065f6:	425b      	neglt	r3, r3
 80065f8:	f042 0202 	orrlt.w	r2, r2, #2
 80065fc:	9307      	strge	r3, [sp, #28]
 80065fe:	9307      	strlt	r3, [sp, #28]
 8006600:	bfb8      	it	lt
 8006602:	9204      	strlt	r2, [sp, #16]
 8006604:	7823      	ldrb	r3, [r4, #0]
 8006606:	2b2e      	cmp	r3, #46	@ 0x2e
 8006608:	d10a      	bne.n	8006620 <_svfiprintf_r+0x130>
 800660a:	7863      	ldrb	r3, [r4, #1]
 800660c:	2b2a      	cmp	r3, #42	@ 0x2a
 800660e:	d132      	bne.n	8006676 <_svfiprintf_r+0x186>
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	9203      	str	r2, [sp, #12]
 8006618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800661c:	3402      	adds	r4, #2
 800661e:	9305      	str	r3, [sp, #20]
 8006620:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80066e4 <_svfiprintf_r+0x1f4>
 8006624:	7821      	ldrb	r1, [r4, #0]
 8006626:	2203      	movs	r2, #3
 8006628:	4650      	mov	r0, sl
 800662a:	f7f9 fdd1 	bl	80001d0 <memchr>
 800662e:	b138      	cbz	r0, 8006640 <_svfiprintf_r+0x150>
 8006630:	9b04      	ldr	r3, [sp, #16]
 8006632:	eba0 000a 	sub.w	r0, r0, sl
 8006636:	2240      	movs	r2, #64	@ 0x40
 8006638:	4082      	lsls	r2, r0
 800663a:	4313      	orrs	r3, r2
 800663c:	3401      	adds	r4, #1
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006644:	4824      	ldr	r0, [pc, #144]	@ (80066d8 <_svfiprintf_r+0x1e8>)
 8006646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800664a:	2206      	movs	r2, #6
 800664c:	f7f9 fdc0 	bl	80001d0 <memchr>
 8006650:	2800      	cmp	r0, #0
 8006652:	d036      	beq.n	80066c2 <_svfiprintf_r+0x1d2>
 8006654:	4b21      	ldr	r3, [pc, #132]	@ (80066dc <_svfiprintf_r+0x1ec>)
 8006656:	bb1b      	cbnz	r3, 80066a0 <_svfiprintf_r+0x1b0>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	3307      	adds	r3, #7
 800665c:	f023 0307 	bic.w	r3, r3, #7
 8006660:	3308      	adds	r3, #8
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006666:	4433      	add	r3, r6
 8006668:	9309      	str	r3, [sp, #36]	@ 0x24
 800666a:	e76a      	b.n	8006542 <_svfiprintf_r+0x52>
 800666c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006670:	460c      	mov	r4, r1
 8006672:	2001      	movs	r0, #1
 8006674:	e7a8      	b.n	80065c8 <_svfiprintf_r+0xd8>
 8006676:	2300      	movs	r3, #0
 8006678:	3401      	adds	r4, #1
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	4619      	mov	r1, r3
 800667e:	f04f 0c0a 	mov.w	ip, #10
 8006682:	4620      	mov	r0, r4
 8006684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006688:	3a30      	subs	r2, #48	@ 0x30
 800668a:	2a09      	cmp	r2, #9
 800668c:	d903      	bls.n	8006696 <_svfiprintf_r+0x1a6>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0c6      	beq.n	8006620 <_svfiprintf_r+0x130>
 8006692:	9105      	str	r1, [sp, #20]
 8006694:	e7c4      	b.n	8006620 <_svfiprintf_r+0x130>
 8006696:	fb0c 2101 	mla	r1, ip, r1, r2
 800669a:	4604      	mov	r4, r0
 800669c:	2301      	movs	r3, #1
 800669e:	e7f0      	b.n	8006682 <_svfiprintf_r+0x192>
 80066a0:	ab03      	add	r3, sp, #12
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	462a      	mov	r2, r5
 80066a6:	4b0e      	ldr	r3, [pc, #56]	@ (80066e0 <_svfiprintf_r+0x1f0>)
 80066a8:	a904      	add	r1, sp, #16
 80066aa:	4638      	mov	r0, r7
 80066ac:	f3af 8000 	nop.w
 80066b0:	1c42      	adds	r2, r0, #1
 80066b2:	4606      	mov	r6, r0
 80066b4:	d1d6      	bne.n	8006664 <_svfiprintf_r+0x174>
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	065b      	lsls	r3, r3, #25
 80066ba:	f53f af2d 	bmi.w	8006518 <_svfiprintf_r+0x28>
 80066be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066c0:	e72c      	b.n	800651c <_svfiprintf_r+0x2c>
 80066c2:	ab03      	add	r3, sp, #12
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	462a      	mov	r2, r5
 80066c8:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <_svfiprintf_r+0x1f0>)
 80066ca:	a904      	add	r1, sp, #16
 80066cc:	4638      	mov	r0, r7
 80066ce:	f000 f879 	bl	80067c4 <_printf_i>
 80066d2:	e7ed      	b.n	80066b0 <_svfiprintf_r+0x1c0>
 80066d4:	0800a3d4 	.word	0x0800a3d4
 80066d8:	0800a3de 	.word	0x0800a3de
 80066dc:	00000000 	.word	0x00000000
 80066e0:	08006439 	.word	0x08006439
 80066e4:	0800a3da 	.word	0x0800a3da

080066e8 <_printf_common>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	4616      	mov	r6, r2
 80066ee:	4698      	mov	r8, r3
 80066f0:	688a      	ldr	r2, [r1, #8]
 80066f2:	690b      	ldr	r3, [r1, #16]
 80066f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	bfb8      	it	lt
 80066fc:	4613      	movlt	r3, r2
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006704:	4607      	mov	r7, r0
 8006706:	460c      	mov	r4, r1
 8006708:	b10a      	cbz	r2, 800670e <_printf_common+0x26>
 800670a:	3301      	adds	r3, #1
 800670c:	6033      	str	r3, [r6, #0]
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	0699      	lsls	r1, r3, #26
 8006712:	bf42      	ittt	mi
 8006714:	6833      	ldrmi	r3, [r6, #0]
 8006716:	3302      	addmi	r3, #2
 8006718:	6033      	strmi	r3, [r6, #0]
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	f015 0506 	ands.w	r5, r5, #6
 8006720:	d106      	bne.n	8006730 <_printf_common+0x48>
 8006722:	f104 0a19 	add.w	sl, r4, #25
 8006726:	68e3      	ldr	r3, [r4, #12]
 8006728:	6832      	ldr	r2, [r6, #0]
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	42ab      	cmp	r3, r5
 800672e:	dc26      	bgt.n	800677e <_printf_common+0x96>
 8006730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	3b00      	subs	r3, #0
 8006738:	bf18      	it	ne
 800673a:	2301      	movne	r3, #1
 800673c:	0692      	lsls	r2, r2, #26
 800673e:	d42b      	bmi.n	8006798 <_printf_common+0xb0>
 8006740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006744:	4641      	mov	r1, r8
 8006746:	4638      	mov	r0, r7
 8006748:	47c8      	blx	r9
 800674a:	3001      	adds	r0, #1
 800674c:	d01e      	beq.n	800678c <_printf_common+0xa4>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	6922      	ldr	r2, [r4, #16]
 8006752:	f003 0306 	and.w	r3, r3, #6
 8006756:	2b04      	cmp	r3, #4
 8006758:	bf02      	ittt	eq
 800675a:	68e5      	ldreq	r5, [r4, #12]
 800675c:	6833      	ldreq	r3, [r6, #0]
 800675e:	1aed      	subeq	r5, r5, r3
 8006760:	68a3      	ldr	r3, [r4, #8]
 8006762:	bf0c      	ite	eq
 8006764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006768:	2500      	movne	r5, #0
 800676a:	4293      	cmp	r3, r2
 800676c:	bfc4      	itt	gt
 800676e:	1a9b      	subgt	r3, r3, r2
 8006770:	18ed      	addgt	r5, r5, r3
 8006772:	2600      	movs	r6, #0
 8006774:	341a      	adds	r4, #26
 8006776:	42b5      	cmp	r5, r6
 8006778:	d11a      	bne.n	80067b0 <_printf_common+0xc8>
 800677a:	2000      	movs	r0, #0
 800677c:	e008      	b.n	8006790 <_printf_common+0xa8>
 800677e:	2301      	movs	r3, #1
 8006780:	4652      	mov	r2, sl
 8006782:	4641      	mov	r1, r8
 8006784:	4638      	mov	r0, r7
 8006786:	47c8      	blx	r9
 8006788:	3001      	adds	r0, #1
 800678a:	d103      	bne.n	8006794 <_printf_common+0xac>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006794:	3501      	adds	r5, #1
 8006796:	e7c6      	b.n	8006726 <_printf_common+0x3e>
 8006798:	18e1      	adds	r1, r4, r3
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	2030      	movs	r0, #48	@ 0x30
 800679e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067a2:	4422      	add	r2, r4
 80067a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067ac:	3302      	adds	r3, #2
 80067ae:	e7c7      	b.n	8006740 <_printf_common+0x58>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4622      	mov	r2, r4
 80067b4:	4641      	mov	r1, r8
 80067b6:	4638      	mov	r0, r7
 80067b8:	47c8      	blx	r9
 80067ba:	3001      	adds	r0, #1
 80067bc:	d0e6      	beq.n	800678c <_printf_common+0xa4>
 80067be:	3601      	adds	r6, #1
 80067c0:	e7d9      	b.n	8006776 <_printf_common+0x8e>
	...

080067c4 <_printf_i>:
 80067c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	7e0f      	ldrb	r7, [r1, #24]
 80067ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067cc:	2f78      	cmp	r7, #120	@ 0x78
 80067ce:	4691      	mov	r9, r2
 80067d0:	4680      	mov	r8, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	469a      	mov	sl, r3
 80067d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067da:	d807      	bhi.n	80067ec <_printf_i+0x28>
 80067dc:	2f62      	cmp	r7, #98	@ 0x62
 80067de:	d80a      	bhi.n	80067f6 <_printf_i+0x32>
 80067e0:	2f00      	cmp	r7, #0
 80067e2:	f000 80d1 	beq.w	8006988 <_printf_i+0x1c4>
 80067e6:	2f58      	cmp	r7, #88	@ 0x58
 80067e8:	f000 80b8 	beq.w	800695c <_printf_i+0x198>
 80067ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067f4:	e03a      	b.n	800686c <_printf_i+0xa8>
 80067f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067fa:	2b15      	cmp	r3, #21
 80067fc:	d8f6      	bhi.n	80067ec <_printf_i+0x28>
 80067fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006804 <_printf_i+0x40>)
 8006800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006804:	0800685d 	.word	0x0800685d
 8006808:	08006871 	.word	0x08006871
 800680c:	080067ed 	.word	0x080067ed
 8006810:	080067ed 	.word	0x080067ed
 8006814:	080067ed 	.word	0x080067ed
 8006818:	080067ed 	.word	0x080067ed
 800681c:	08006871 	.word	0x08006871
 8006820:	080067ed 	.word	0x080067ed
 8006824:	080067ed 	.word	0x080067ed
 8006828:	080067ed 	.word	0x080067ed
 800682c:	080067ed 	.word	0x080067ed
 8006830:	0800696f 	.word	0x0800696f
 8006834:	0800689b 	.word	0x0800689b
 8006838:	08006929 	.word	0x08006929
 800683c:	080067ed 	.word	0x080067ed
 8006840:	080067ed 	.word	0x080067ed
 8006844:	08006991 	.word	0x08006991
 8006848:	080067ed 	.word	0x080067ed
 800684c:	0800689b 	.word	0x0800689b
 8006850:	080067ed 	.word	0x080067ed
 8006854:	080067ed 	.word	0x080067ed
 8006858:	08006931 	.word	0x08006931
 800685c:	6833      	ldr	r3, [r6, #0]
 800685e:	1d1a      	adds	r2, r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6032      	str	r2, [r6, #0]
 8006864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800686c:	2301      	movs	r3, #1
 800686e:	e09c      	b.n	80069aa <_printf_i+0x1e6>
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	1d19      	adds	r1, r3, #4
 8006876:	6031      	str	r1, [r6, #0]
 8006878:	0606      	lsls	r6, r0, #24
 800687a:	d501      	bpl.n	8006880 <_printf_i+0xbc>
 800687c:	681d      	ldr	r5, [r3, #0]
 800687e:	e003      	b.n	8006888 <_printf_i+0xc4>
 8006880:	0645      	lsls	r5, r0, #25
 8006882:	d5fb      	bpl.n	800687c <_printf_i+0xb8>
 8006884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006888:	2d00      	cmp	r5, #0
 800688a:	da03      	bge.n	8006894 <_printf_i+0xd0>
 800688c:	232d      	movs	r3, #45	@ 0x2d
 800688e:	426d      	negs	r5, r5
 8006890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006894:	4858      	ldr	r0, [pc, #352]	@ (80069f8 <_printf_i+0x234>)
 8006896:	230a      	movs	r3, #10
 8006898:	e011      	b.n	80068be <_printf_i+0xfa>
 800689a:	6821      	ldr	r1, [r4, #0]
 800689c:	6833      	ldr	r3, [r6, #0]
 800689e:	0608      	lsls	r0, r1, #24
 80068a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80068a4:	d402      	bmi.n	80068ac <_printf_i+0xe8>
 80068a6:	0649      	lsls	r1, r1, #25
 80068a8:	bf48      	it	mi
 80068aa:	b2ad      	uxthmi	r5, r5
 80068ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80068ae:	4852      	ldr	r0, [pc, #328]	@ (80069f8 <_printf_i+0x234>)
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	bf14      	ite	ne
 80068b4:	230a      	movne	r3, #10
 80068b6:	2308      	moveq	r3, #8
 80068b8:	2100      	movs	r1, #0
 80068ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068be:	6866      	ldr	r6, [r4, #4]
 80068c0:	60a6      	str	r6, [r4, #8]
 80068c2:	2e00      	cmp	r6, #0
 80068c4:	db05      	blt.n	80068d2 <_printf_i+0x10e>
 80068c6:	6821      	ldr	r1, [r4, #0]
 80068c8:	432e      	orrs	r6, r5
 80068ca:	f021 0104 	bic.w	r1, r1, #4
 80068ce:	6021      	str	r1, [r4, #0]
 80068d0:	d04b      	beq.n	800696a <_printf_i+0x1a6>
 80068d2:	4616      	mov	r6, r2
 80068d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d8:	fb03 5711 	mls	r7, r3, r1, r5
 80068dc:	5dc7      	ldrb	r7, [r0, r7]
 80068de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068e2:	462f      	mov	r7, r5
 80068e4:	42bb      	cmp	r3, r7
 80068e6:	460d      	mov	r5, r1
 80068e8:	d9f4      	bls.n	80068d4 <_printf_i+0x110>
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d10b      	bne.n	8006906 <_printf_i+0x142>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	07df      	lsls	r7, r3, #31
 80068f2:	d508      	bpl.n	8006906 <_printf_i+0x142>
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	6861      	ldr	r1, [r4, #4]
 80068f8:	4299      	cmp	r1, r3
 80068fa:	bfde      	ittt	le
 80068fc:	2330      	movle	r3, #48	@ 0x30
 80068fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006902:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006906:	1b92      	subs	r2, r2, r6
 8006908:	6122      	str	r2, [r4, #16]
 800690a:	f8cd a000 	str.w	sl, [sp]
 800690e:	464b      	mov	r3, r9
 8006910:	aa03      	add	r2, sp, #12
 8006912:	4621      	mov	r1, r4
 8006914:	4640      	mov	r0, r8
 8006916:	f7ff fee7 	bl	80066e8 <_printf_common>
 800691a:	3001      	adds	r0, #1
 800691c:	d14a      	bne.n	80069b4 <_printf_i+0x1f0>
 800691e:	f04f 30ff 	mov.w	r0, #4294967295
 8006922:	b004      	add	sp, #16
 8006924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	f043 0320 	orr.w	r3, r3, #32
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	4832      	ldr	r0, [pc, #200]	@ (80069fc <_printf_i+0x238>)
 8006932:	2778      	movs	r7, #120	@ 0x78
 8006934:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	6831      	ldr	r1, [r6, #0]
 800693c:	061f      	lsls	r7, r3, #24
 800693e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006942:	d402      	bmi.n	800694a <_printf_i+0x186>
 8006944:	065f      	lsls	r7, r3, #25
 8006946:	bf48      	it	mi
 8006948:	b2ad      	uxthmi	r5, r5
 800694a:	6031      	str	r1, [r6, #0]
 800694c:	07d9      	lsls	r1, r3, #31
 800694e:	bf44      	itt	mi
 8006950:	f043 0320 	orrmi.w	r3, r3, #32
 8006954:	6023      	strmi	r3, [r4, #0]
 8006956:	b11d      	cbz	r5, 8006960 <_printf_i+0x19c>
 8006958:	2310      	movs	r3, #16
 800695a:	e7ad      	b.n	80068b8 <_printf_i+0xf4>
 800695c:	4826      	ldr	r0, [pc, #152]	@ (80069f8 <_printf_i+0x234>)
 800695e:	e7e9      	b.n	8006934 <_printf_i+0x170>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	f023 0320 	bic.w	r3, r3, #32
 8006966:	6023      	str	r3, [r4, #0]
 8006968:	e7f6      	b.n	8006958 <_printf_i+0x194>
 800696a:	4616      	mov	r6, r2
 800696c:	e7bd      	b.n	80068ea <_printf_i+0x126>
 800696e:	6833      	ldr	r3, [r6, #0]
 8006970:	6825      	ldr	r5, [r4, #0]
 8006972:	6961      	ldr	r1, [r4, #20]
 8006974:	1d18      	adds	r0, r3, #4
 8006976:	6030      	str	r0, [r6, #0]
 8006978:	062e      	lsls	r6, r5, #24
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	d501      	bpl.n	8006982 <_printf_i+0x1be>
 800697e:	6019      	str	r1, [r3, #0]
 8006980:	e002      	b.n	8006988 <_printf_i+0x1c4>
 8006982:	0668      	lsls	r0, r5, #25
 8006984:	d5fb      	bpl.n	800697e <_printf_i+0x1ba>
 8006986:	8019      	strh	r1, [r3, #0]
 8006988:	2300      	movs	r3, #0
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	4616      	mov	r6, r2
 800698e:	e7bc      	b.n	800690a <_printf_i+0x146>
 8006990:	6833      	ldr	r3, [r6, #0]
 8006992:	1d1a      	adds	r2, r3, #4
 8006994:	6032      	str	r2, [r6, #0]
 8006996:	681e      	ldr	r6, [r3, #0]
 8006998:	6862      	ldr	r2, [r4, #4]
 800699a:	2100      	movs	r1, #0
 800699c:	4630      	mov	r0, r6
 800699e:	f7f9 fc17 	bl	80001d0 <memchr>
 80069a2:	b108      	cbz	r0, 80069a8 <_printf_i+0x1e4>
 80069a4:	1b80      	subs	r0, r0, r6
 80069a6:	6060      	str	r0, [r4, #4]
 80069a8:	6863      	ldr	r3, [r4, #4]
 80069aa:	6123      	str	r3, [r4, #16]
 80069ac:	2300      	movs	r3, #0
 80069ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b2:	e7aa      	b.n	800690a <_printf_i+0x146>
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	4632      	mov	r2, r6
 80069b8:	4649      	mov	r1, r9
 80069ba:	4640      	mov	r0, r8
 80069bc:	47d0      	blx	sl
 80069be:	3001      	adds	r0, #1
 80069c0:	d0ad      	beq.n	800691e <_printf_i+0x15a>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	079b      	lsls	r3, r3, #30
 80069c6:	d413      	bmi.n	80069f0 <_printf_i+0x22c>
 80069c8:	68e0      	ldr	r0, [r4, #12]
 80069ca:	9b03      	ldr	r3, [sp, #12]
 80069cc:	4298      	cmp	r0, r3
 80069ce:	bfb8      	it	lt
 80069d0:	4618      	movlt	r0, r3
 80069d2:	e7a6      	b.n	8006922 <_printf_i+0x15e>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4632      	mov	r2, r6
 80069d8:	4649      	mov	r1, r9
 80069da:	4640      	mov	r0, r8
 80069dc:	47d0      	blx	sl
 80069de:	3001      	adds	r0, #1
 80069e0:	d09d      	beq.n	800691e <_printf_i+0x15a>
 80069e2:	3501      	adds	r5, #1
 80069e4:	68e3      	ldr	r3, [r4, #12]
 80069e6:	9903      	ldr	r1, [sp, #12]
 80069e8:	1a5b      	subs	r3, r3, r1
 80069ea:	42ab      	cmp	r3, r5
 80069ec:	dcf2      	bgt.n	80069d4 <_printf_i+0x210>
 80069ee:	e7eb      	b.n	80069c8 <_printf_i+0x204>
 80069f0:	2500      	movs	r5, #0
 80069f2:	f104 0619 	add.w	r6, r4, #25
 80069f6:	e7f5      	b.n	80069e4 <_printf_i+0x220>
 80069f8:	0800a3e5 	.word	0x0800a3e5
 80069fc:	0800a3f6 	.word	0x0800a3f6

08006a00 <memmove>:
 8006a00:	4288      	cmp	r0, r1
 8006a02:	b510      	push	{r4, lr}
 8006a04:	eb01 0402 	add.w	r4, r1, r2
 8006a08:	d902      	bls.n	8006a10 <memmove+0x10>
 8006a0a:	4284      	cmp	r4, r0
 8006a0c:	4623      	mov	r3, r4
 8006a0e:	d807      	bhi.n	8006a20 <memmove+0x20>
 8006a10:	1e43      	subs	r3, r0, #1
 8006a12:	42a1      	cmp	r1, r4
 8006a14:	d008      	beq.n	8006a28 <memmove+0x28>
 8006a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a1e:	e7f8      	b.n	8006a12 <memmove+0x12>
 8006a20:	4402      	add	r2, r0
 8006a22:	4601      	mov	r1, r0
 8006a24:	428a      	cmp	r2, r1
 8006a26:	d100      	bne.n	8006a2a <memmove+0x2a>
 8006a28:	bd10      	pop	{r4, pc}
 8006a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a32:	e7f7      	b.n	8006a24 <memmove+0x24>

08006a34 <_sbrk_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d06      	ldr	r5, [pc, #24]	@ (8006a50 <_sbrk_r+0x1c>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	602b      	str	r3, [r5, #0]
 8006a40:	f7fa fe0a 	bl	8001658 <_sbrk>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_sbrk_r+0x1a>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_sbrk_r+0x1a>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	2000a388 	.word	0x2000a388

08006a54 <_realloc_r>:
 8006a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a58:	4607      	mov	r7, r0
 8006a5a:	4614      	mov	r4, r2
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	b921      	cbnz	r1, 8006a6a <_realloc_r+0x16>
 8006a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a64:	4611      	mov	r1, r2
 8006a66:	f7ff bc5b 	b.w	8006320 <_malloc_r>
 8006a6a:	b92a      	cbnz	r2, 8006a78 <_realloc_r+0x24>
 8006a6c:	f7ff fbec 	bl	8006248 <_free_r>
 8006a70:	4625      	mov	r5, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a78:	f000 f81a 	bl	8006ab0 <_malloc_usable_size_r>
 8006a7c:	4284      	cmp	r4, r0
 8006a7e:	4606      	mov	r6, r0
 8006a80:	d802      	bhi.n	8006a88 <_realloc_r+0x34>
 8006a82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a86:	d8f4      	bhi.n	8006a72 <_realloc_r+0x1e>
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	f7ff fc48 	bl	8006320 <_malloc_r>
 8006a90:	4680      	mov	r8, r0
 8006a92:	b908      	cbnz	r0, 8006a98 <_realloc_r+0x44>
 8006a94:	4645      	mov	r5, r8
 8006a96:	e7ec      	b.n	8006a72 <_realloc_r+0x1e>
 8006a98:	42b4      	cmp	r4, r6
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	bf28      	it	cs
 8006aa0:	4632      	movcs	r2, r6
 8006aa2:	f7ff fbc3 	bl	800622c <memcpy>
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f7ff fbcd 	bl	8006248 <_free_r>
 8006aae:	e7f1      	b.n	8006a94 <_realloc_r+0x40>

08006ab0 <_malloc_usable_size_r>:
 8006ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab4:	1f18      	subs	r0, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bfbc      	itt	lt
 8006aba:	580b      	ldrlt	r3, [r1, r0]
 8006abc:	18c0      	addlt	r0, r0, r3
 8006abe:	4770      	bx	lr

08006ac0 <_init>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr

08006acc <_fini>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr
